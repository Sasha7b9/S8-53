CCS PCH C Compiler, Version 5.015, 5967               22-ноя-18 08:35

               Filename:   D:\Projects\stm32\S8-53_new\sources\PanelS8-53\mn_sever.lst

               ROM used:   2666 bytes (6%)
                           Largest free fragment is 45650
               RAM used:   157 (4%) at main() level
                           157 (4%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   01B6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00F2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //Опрос состояния кнопок и ручек. 
.................... //Состояние кнопок и ручек передается по SPI(ведущий режим) и считывается состояние светодиодов каждые 10мс  
....................  
.................... #include <18F2515.h> 
.................... //////////// Standard Header file for the PIC18F2515 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2515 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 3E,3D
00B2:  DATA 3B,37
00B4:  DATA 2F,1F
00B6:  MOVFF  FF2,0D
00BA:  BCF    FF2.7
00BC:  CLRF   FF7
00BE:  ADDLW  D0
00C0:  MOVWF  FF6
00C2:  MOVLW  00
00C4:  ADDWFC FF7,F
00C6:  TBLRD*+
00C8:  MOVF   FF5,W
00CA:  BTFSC  0D.7
00CC:  BSF    FF2.7
00CE:  RETURN 0
00D0:  DATA 21,21
00D2:  DATA 21,39
00D4:  DATA 21,3F
....................  
.................... #list 
....................  
.................... #include <P18F2515.INC> 
....................  //       LIST 
....................  
....................  
....................  //       NOLIST 
....................  
....................  
....................  //       IFNDEF __18F2515 
....................  //          MESSG "Processor-header file mismatch.  Verify selected processor." 
....................  //       ENDIF 
....................  
.................... /*;========================================================================== 
.................... ;       18xxxx Family        EQUates 
.................... ;==========================================================================*/ 
.................... #define FSR0            = 0 
.................... #define FSR1            = 1 
.................... #define FSR2            = 2 
....................  
.................... #define FAST            = 1 
....................  
.................... #define W               = 0 
.................... #define A               = 0 
.................... #define ACCESS          = 0 
.................... #define BANKED          = 1 
.................... //;========================================================================== 
....................  
.................... //;========================================================================== 
.................... //;       16Cxxx/17Cxxx Substitutions 
.................... //;========================================================================== 
....................   #define DDRA  TRISA      ; PIC17Cxxx SFR substitution 
....................   #define DDRB  TRISB      ; PIC17Cxxx SFR substitution 
....................   #define DDRC  TRISC      ; PIC17Cxxx SFR substitution 
....................   #define DDRD  TRISD      ; PIC17Cxxx SFR substitution 
....................   #define DDRE  TRISE      ; PIC17Cxxx SFR substitution 
....................  
.................... //;========================================================================== 
.................... //; 
.................... //;       Register Definitions 
.................... //; 
.................... //;========================================================================== 
....................  
.................... //;----- Register Files ----------------------------------------------------- 
.................... #byte PORTA            =  0x0F80 
.................... #byte PORTB            =  0x0F81 
.................... #byte PORTC            =  0x0F82 
.................... #byte PORTE            =  0x0F84 
.................... #byte LATA             =  0x0F89 
.................... #byte LATB             =  0x0F8A 
.................... #byte LATC             =  0x0F8B 
.................... //#byte DDRA             =  0x0F92 
.................... #byte TRISA            =  0x0F92 
.................... //#byte DDRB             =  0x0F93 
.................... #byte TRISB            =  0x0F93 
.................... //#byte DDRC             =  0x0F94 
.................... #byte TRISC            =  0x0F94 
.................... #byte OSCTUNE          =  0x0F9B 
.................... #byte PIE1             =  0x0F9D 
.................... #byte PIR1             =  0x0F9E 
.................... #byte IPR1             =  0x0F9F 
.................... #byte PIE2             =  0x0FA0 
.................... #byte PIR2             =  0x0FA1 
.................... #byte IPR2             =  0x0FA2 
.................... #byte RCSTA            =  0x0FAB 
.................... #byte TXSTA            =  0x0FAC 
.................... #byte TXREG            =  0x0FAD 
.................... #byte RCREG            =  0x0FAE 
.................... #byte SPBRG            =  0x0FAF 
.................... #byte SPBRGH           =  0x0FB0 
.................... #byte T3CON            =  0x0FB1 
.................... #byte TMR3L            =  0x0FB2 
.................... #byte TMR3H            =  0x0FB3 
.................... #byte CMCON            =  0x0FB4 
.................... #byte CVRCON           =  0x0FB5 
.................... #byte PWM1CON          =  0x0FB7 
.................... #byte BAUDCON          =  0x0FB8 
.................... #byte BAUDCTL          =  0x0FB8 
.................... #byte CCP2CON          =  0x0FBA 
.................... #byte CCPR2            =  0x0FBB 
.................... #byte CCPR2L           =  0x0FBB 
.................... #byte CCPR2H           =  0x0FBC 
.................... #byte CCP1CON          =  0x0FBD 
.................... #byte CCPR1            =  0x0FBE 
.................... #byte CCPR1L           =  0x0FBE 
.................... #byte CCPR1H           =  0x0FBF 
.................... #byte ADCON2           =  0x0FC0 
.................... #byte ADCON1           =  0x0FC1 
.................... #byte ADCON0           =  0x0FC2 
.................... #byte ADRES            =  0x0FC3 
.................... #byte ADRESL           =  0x0FC3 
.................... #byte ADRESH           =  0x0FC4 
.................... #byte SSPCON2          =  0x0FC5 
.................... #byte SSPCON1          =  0x0FC6 
.................... #byte SSPSTAT          =  0x0FC7 
.................... #byte SSPADD           =  0x0FC8 
.................... #byte SSPBUF           =  0x0FC9 
.................... #byte T2CON            =  0x0FCA 
.................... #byte PR2              =  0x0FCB 
.................... #byte TMR2             =  0x0FCC 
.................... #byte T1CON            =  0x0FCD 
.................... #byte TMR1L            =  0x0FCE 
.................... #byte TMR1H            =  0x0FCF 
.................... #byte RCON             =  0x0FD0 
.................... #byte WDTCON           =  0x0FD1 
.................... #byte HLVDCON          =  0x0FD2 
.................... #byte LVDCON           =  0x0FD2 
.................... #byte OSCCON           =  0x0FD3 
.................... #byte T0CON            =  0x0FD5 
.................... #byte TMR0L            =  0x0FD6 
.................... #byte TMR0H            =  0x0FD7 
.................... #byte STATUS           =  0x0FD8 
.................... #byte FSR2L            =  0x0FD9 
.................... #byte FSR2H            =  0x0FDA 
.................... #byte PLUSW2           =  0x0FDB 
.................... #byte PREINC2          =  0x0FDC 
.................... #byte POSTDEC2         =  0x0FDD 
.................... #byte POSTINC2         =  0x0FDE 
.................... #byte INDF2            =  0x0FDF 
.................... #byte BSR              =  0x0FE0 
.................... #byte FSR1L            =  0x0FE1 
.................... #byte FSR1H            =  0x0FE2 
.................... #byte PLUSW1           =  0x0FE3 
.................... #byte PREINC1          =  0x0FE4 
.................... #byte POSTDEC1         =  0x0FE5 
.................... #byte POSTINC1         =  0x0FE6 
.................... #byte INDF1            =  0x0FE7 
.................... #byte WREG             =  0x0FE8 
.................... #byte FSR0L            =  0x0FE9 
.................... #byte FSR0H            =  0x0FEA 
.................... #byte PLUSW0           =  0x0FEB 
.................... #byte PREINC0          =  0x0FEC 
.................... #byte POSTDEC0         =  0x0FED 
.................... #byte POSTINC0         =  0x0FEE 
.................... #byte INDF0            =  0x0FEF 
.................... #byte INTCON3          =  0x0FF0 
.................... #byte INTCON2          =  0x0FF1 
.................... #byte INTCON           =  0x0FF2 
.................... #byte PROD             =  0x0FF3 
.................... #byte PRODL            =  0x0FF3 
.................... #byte PRODH            =  0x0FF4 
.................... #byte TABLAT           =  0x0FF5 
.................... #byte TBLPTR           =  0x0FF6 
.................... #byte TBLPTRL          =  0x0FF6 
.................... #byte TBLPTRH          =  0x0FF7 
.................... #byte TBLPTRU          =  0x0FF8 
.................... #byte PC               =  0x0FF9 
.................... #byte PCL              =  0x0FF9 
.................... #byte PCLATH           =  0x0FFA 
.................... #byte PCLATU           =  0x0FFB 
.................... #byte STKPTR           =  0x0FFC 
.................... #byte TOS              =  0x0FFD 
.................... #byte TOSL             =  0x0FFD 
.................... #byte TOSH             =  0x0FFE 
.................... #byte TOSU             =  0x0FFF 
.................... /* 
.................... //;----- PORTA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
.................... #define T0CKI            =  0x0004 
.................... #define AN4              =  0x0005 
....................  
.................... #define SS               =  0x0005 
....................  
.................... #define NOT_SS           =  0x0005 
....................  
.................... #define LVDIN            =  0x0005 
....................  
.................... #define HLVDIN           =  0x0005 
....................  
....................  
.................... //;----- PORTB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
.................... #define INT0             =  0x0000 
.................... #define INT1             =  0x0001 
.................... #define INT2             =  0x0002 
.................... #define CCP2_PORTB       =  0x0003 
.................... #define KBI0             =  0x0004 
.................... #define KBI1             =  0x0005 
.................... #define KBI2             =  0x0006 
.................... #define KBI3             =  0x0007 
....................  
.................... #define AN12             =  0x0000 
.................... #define AN10             =  0x0001 
.................... #define AN8              =  0x0002 
.................... #define AN9              =  0x0003 
.................... #define AN11             =  0x0004 
.................... #define PGM              =  0x0005 
.................... #define PGC              =  0x0006 
.................... #define PGD              =  0x0007 
....................  
.................... #define DAD5             =  0x0005 
.................... #define DAD6             =  0x0006 
.................... #define DAD7             =  0x0007 
....................  
....................  
.................... //;----- PORTC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
.................... #define T1OSO            =  0x0000 
.................... #define T1OSI            =  0x0001 
.................... #define CCP1             =  0x0002 
.................... #define SCK              =  0x0003 
.................... #define SDI              =  0x0004 
.................... #define SDO              =  0x0005 
.................... #define TX               =  0x0006 
.................... #define RX               =  0x0007 
....................  
.................... #define T13CKI           =  0x0000 
.................... #define CCP2_PORTC       =  0x0001 
.................... #define SCL              =  0x0003 
.................... #define SDA              =  0x0004 
.................... #define CK               =  0x0006 
.................... //; DT is a reserved word 
.................... //; DT               EQU  H'0007' 
....................  
....................  
.................... //;----- PORTE Bits ----------------------------------------------------- 
.................... #define RE3              =  0x0003 
....................  
....................  
.................... //;----- LATA Bits ----------------------------------------------------- 
.................... #define LATA0            =  0x0000 
.................... #define LATA1            =  0x0001 
.................... #define LATA2            =  0x0002 
.................... #define LATA3            =  0x0003 
.................... #define LATA4            =  0x0004 
.................... #define LATA5            =  0x0005 
.................... #define LATA6            =  0x0006 
.................... #define LATA7            =  0x0007 
....................  
....................  
.................... //;----- LATB Bits ----------------------------------------------------- 
.................... #define LATB0            =  0x0000 
.................... #define LATB1            =  0x0001 
.................... #define LATB2            =  0x0002 
.................... #define LATB3            =  0x0003 
.................... #define LATB4            =  0x0004 
.................... #define LATB5            =  0x0005 
.................... #define LATB6            =  0x0006 
.................... #define LATB7            =  0x0007 
....................  
....................  
.................... //;----- LATC Bits ----------------------------------------------------- 
.................... #define LATC0            =  0x0000 
.................... #define LATC1            =  0x0001 
.................... #define LATC2            =  0x0002 
.................... #define LATC3            =  0x0003 
.................... #define LATC4            =  0x0004 
.................... #define LATC5            =  0x0005 
.................... #define LATC6            =  0x0006 
.................... #define LATC7            =  0x0007 
....................  
....................  
.................... //;----- DDRA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
....................  
.................... //;----- TRISA Bits ----------------------------------------------------- 
.................... #define TRISA0           =  0x0000 
.................... #define TRISA1           =  0x0001 
.................... #define TRISA2           =  0x0002 
.................... #define TRISA3           =  0x0003 
.................... #define TRISA4           =  0x0004 
.................... #define TRISA5           =  0x0005 
.................... #define TRISA6           =  0x0006 
.................... #define TRISA7           =  0x0007 
....................  
....................  
.................... //;----- DDRB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
....................  
.................... //;----- TRISB Bits ----------------------------------------------------- 
.................... #define TRISB0           =  0x0000 
.................... #define TRISB1           =  0x0001 
.................... #define TRISB2           =  0x0002 
.................... #define TRISB3           =  0x0003 
.................... #define TRISB4           =  0x0004 
.................... #define TRISB5           =  0x0005 
.................... #define TRISB6           =  0x0006 
.................... #define TRISB7           =  0x0007 
....................  
....................  
.................... //;----- DDRC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
....................  
.................... //;----- TRISC Bits ----------------------------------------------------- 
.................... #define TRISC0           =  0x0000 
.................... #define TRISC1           =  0x0001 
.................... #define TRISC2           =  0x0002 
.................... #define TRISC3           =  0x0003 
.................... #define TRISC4           =  0x0004 
.................... #define TRISC5           =  0x0005 
.................... #define TRISC6           =  0x0006 
.................... #define TRISC7           =  0x0007 
....................  
....................  
.................... //;----- OSCTUNE Bits ----------------------------------------------------- 
.................... #define TUN0             =  0x0000 
.................... #define TUN1             =  0x0001 
.................... #define TUN2             =  0x0002 
.................... #define TUN3             =  0x0003 
.................... #define TUN4             =  0x0004 
.................... #define PLLEN            =  0x0006 
.................... #define INTSRC           =  0x0007 
....................  
....................  
.................... //;----- PIE1 Bits ----------------------------------------------------- 
.................... #define TMR1IE           =  0x0000 
.................... #define TMR2IE           =  0x0001 
.................... #define CCP1IE           =  0x0002 
.................... #define SSPIE            =  0x0003 
.................... #define TXIE             =  0x0004 
.................... #define RCIE             =  0x0005 
.................... #define ADIE             =  0x0006 
....................  
....................  
.................... //;----- PIR1 Bits ----------------------------------------------------- 
.................... #define TMR1IF           =  0x0000 
.................... #define TMR2IF           =  0x0001 
.................... #define CCP1IF           =  0x0002 
.................... #define SSPIF            =  0x0003 
.................... #define TXIF             =  0x0004 
.................... #define RCIF             =  0x0005 
.................... #define ADIF             =  0x0006 
....................  
....................  
.................... //;----- IPR1 Bits ----------------------------------------------------- 
.................... #define TMR1IP           =  0x0000 
.................... #define TMR2IP           =  0x0001 
.................... #define CCP1IP           =  0x0002 
.................... #define SSPIP            =  0x0003 
.................... #define TXIP             =  0x0004 
.................... #define RCIP             =  0x0005 
.................... #define ADIP             =  0x0006 
....................  
....................  
.................... //;----- PIE2 Bits ----------------------------------------------------- 
.................... #define CCP2IE           =  0x0000 
.................... #define TMR3IE           =  0x0001 
.................... #define LVDIE            =  0x0002 
.................... #define BCLIE            =  0x0003 
.................... #define CMIE             =  0x0006 
.................... #define OSCFIE           =  0x0007 
....................  
.................... #define HLVDIE           =  0x0002 
....................  
....................  
.................... //;----- PIR2 Bits ----------------------------------------------------- 
.................... #define CCP2IF           =  0x0000 
.................... #define TMR3IF           =  0x0001 
.................... #define LVDIF            =  0x0002 
.................... #define BCLIF            =  0x0003 
.................... #define CMIF             =  0x0006 
.................... #define OSCFIF           =  0x0007 
....................  
.................... #define HLVDIF           =  0x0002 
....................  
....................  
.................... //;----- IPR2 Bits ----------------------------------------------------- 
.................... #define CCP2IP           =  0x0000 
.................... #define TMR3IP           =  0x0001 
.................... #define LVDIP            =  0x0002 
.................... #define BCLIP            =  0x0003 
.................... #define CMIP             =  0x0006 
.................... #define OSCFIP           =  0x0007 
....................  
.................... #define HLVDIP           =  0x0002 
....................  
....................  
.................... //;----- RCSTA Bits ----------------------------------------------------- 
.................... #define RX9D             =  0x0000 
.................... #define OERR             =  0x0001 
.................... #define FERR             =  0x0002 
.................... #define ADEN             =  0x0003 
.................... #define CREN             =  0x0004 
.................... #define SREN             =  0x0005 
.................... #define RX9              =  0x0006 
.................... #define SPEN             =  0x0007 
....................  
.................... #define ADDEN            =  0x0003 
....................  
....................  
.................... //;----- TXSTA Bits ----------------------------------------------------- 
.................... #define TX9D             =  0x0000 
.................... #define TRMT             =  0x0001 
.................... #define BRGH             =  0x0002 
.................... #define SENDB            =  0x0003 
.................... #define SYNC             =  0x0004 
.................... #define TXEN             =  0x0005 
.................... #define TX9              =  0x0006 
.................... #define CSRC             =  0x0007 
....................  
....................  
.................... //;----- T3CON Bits ----------------------------------------------------- 
.................... #define TMR3ON           =  0x0000 
.................... #define TMR3CS           =  0x0001 
.................... #define T3SYNC           =  0x0002 
.................... #define T3CCP1           =  0x0003 
.................... #define T3CKPS0          =  0x0004 
.................... #define T3CKPS1          =  0x0005 
.................... #define T3CCP2           =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T3SYNC       =  0x0002 
....................  
.................... //;----- CMCON Bits ----------------------------------------------------- 
.................... #define CM0              =  0x0000 
.................... #define CM1              =  0x0001 
.................... #define CM2              =  0x0002 
.................... #define CIS              =  0x0003 
.................... #define C1INV            =  0x0004 
.................... #define C2INV            =  0x0005 
.................... #define C1OUT            =  0x0006 
.................... #define C2OUT            =  0x0007 
....................  
....................  
.................... //;----- CVRCON Bits ----------------------------------------------------- 
.................... #define CVR0             =  0x0000 
.................... #define CVR1             =  0x0001 
.................... #define CVR2             =  0x0002 
.................... #define CVR3             =  0x0003 
.................... #define CVRSS            =  0x0004 
.................... #define CVRR             =  0x0005 
.................... #define CVROE            =  0x0006 
.................... #define CVREN            =  0x0007 
....................  
....................  
.................... //;----- PWM1CON Bits ----------------------------------------------------- 
.................... #define PRSEN            =  0x0007 
....................  
....................  
.................... //;----- BAUDCON Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- BAUDCTL Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- CCP2CON Bits ----------------------------------------------------- 
.................... #define CCP2M0           =  0x0000 
.................... #define CCP2M1           =  0x0001 
.................... #define CCP2M2           =  0x0002 
.................... #define CCP2M3           =  0x0003 
.................... #define CCP2Y            =  0x0004 
.................... #define CCP2X            =  0x0005 
....................  
.................... #define DC2B0            =  0x0004 
.................... #define DC2B1            =  0x0005 
....................  
....................  
.................... //;----- CCP1CON Bits ----------------------------------------------------- 
.................... #define CCP1M0           =  0x0000 
.................... #define CCP1M1           =  0x0001 
.................... #define CCP1M2           =  0x0002 
.................... #define CCP1M3           =  0x0003 
.................... #define CCP1Y            =  0x0004 
.................... #define CCP1X            =  0x0005 
....................  
.................... #define DC1B0            =  0x0004 
.................... #define DC1B1            =  0x0005 
....................  
....................  
.................... //;----- ADCON2 Bits ----------------------------------------------------- 
.................... #define ADCS0            =  0x0000 
.................... #define ADCS1            =  0x0001 
.................... #define ADCS2            =  0x0002 
.................... #define ACQT0            =  0x0003 
.................... #define ACQT1            =  0x0004 
.................... #define ACQT2            =  0x0005 
.................... #define ADFM             =  0x0007 
....................  
....................  
.................... //;----- ADCON1 Bits ----------------------------------------------------- 
.................... #define PCFG0            =  0x0000 
.................... #define PCFG1            =  0x0001 
.................... #define PCFG2            =  0x0002 
.................... #define PCFG3            =  0x0003 
.................... #define VCFG0            =  0x0004 
.................... #define VCFG1            =  0x0005 
....................  
....................  
.................... //;----- ADCON0 Bits ----------------------------------------------------- 
.................... #define ADON             =  0x0000 
.................... #define GO               =  0x0001 
.................... #define CHS0             =  0x0002 
.................... #define CHS1             =  0x0003 
.................... #define CHS2             =  0x0004 
.................... #define CHS3             =  0x0005 
....................  
.................... #define DONE             =  0x0001 
....................  
.................... #define NOT_DONE         =  0x0001 
....................  
.................... #define GO_DONE          =  0x0001 
....................  
....................  
.................... //;----- SSPCON2 Bits ----------------------------------------------------- 
.................... #define SEN              =  0x0000 
.................... #define RSEN             =  0x0001 
.................... #define PEN              =  0x0002 
.................... #define RCEN             =  0x0003 
.................... #define ACKEN            =  0x0004 
.................... #define ACKDT            =  0x0005 
.................... #define ACKSTAT          =  0x0006 
.................... #define GCEN             =  0x0007 
....................  
....................  
.................... //;----- SSPCON1 Bits ----------------------------------------------------- 
.................... #define SSPM0            =  0x0000 
.................... #define SSPM1            =  0x0001 
.................... #define SSPM2            =  0x0002 
.................... #define SSPM3            =  0x0003 
.................... #define CKP              =  0x0004 
.................... #define SSPEN            =  0x0005 
.................... #define SSPOV            =  0x0006 
.................... #define WCOL             =  0x0007 
....................  
....................  
.................... //;----- SSPSTAT Bits ----------------------------------------------------- 
.................... #define BF               =  0x0000 
.................... #define UA               =  0x0001 
.................... #define R                =  0x0002 
.................... #define S                =  0x0003 
.................... #define P                =  0x0004 
.................... #define D                =  0x0005 
.................... #define CKE              =  0x0006 
.................... #define SMP              =  0x0007 
....................  
....................  
.................... #define NOT_W            =  0x0002 
.................... #define NOT_A            =  0x0005 
....................  
.................... #define R_W              =  0x0002 
.................... #define D_A              =  0x0005 
....................  
.................... #define NOT_WRITE        =  0x0002 
.................... #define NOT_ADDRESS      =  0x0005 
....................  
....................  
.................... //;----- T2CON Bits ----------------------------------------------------- 
.................... #define T2CKPS0          =  0x0000 
.................... #define T2CKPS1          =  0x0001 
.................... #define TMR2ON           =  0x0002 
.................... #define T2OUTPS0         =  0x0003 
.................... #define T2OUTPS1         =  0x0004 
.................... #define T2OUTPS2         =  0x0005 
.................... #define T2OUTPS3         =  0x0006 
....................  
.................... #define TOUTPS0          =  0x0003 
.................... #define TOUTPS1          =  0x0004 
.................... #define TOUTPS2          =  0x0005 
.................... #define TOUTPS3          =  0x0006 
....................  
....................  
.................... //;----- T1CON Bits ----------------------------------------------------- 
.................... #define TMR1ON           =  0x0000 
.................... #define TMR1CS           =  0x0001 
.................... #define T1SYNC           =  0x0002 
.................... #define T1OSCEN          =  0x0003 
.................... #define T1CKPS0          =  0x0004 
.................... #define T1CKPS1          =  0x0005 
.................... #define T1RUN            =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T1SYNC       =  0x0002 
....................  
....................  
.................... //;----- RCON Bits ----------------------------------------------------- 
.................... #define BOR              =  0x0000 
.................... #define POR              =  0x0001 
.................... #define PD               =  0x0002 
.................... #define TO               =  0x0003 
.................... #define RI               =  0x0004 
.................... #define SBOREN           =  0x0006 
.................... #define IPEN             =  0x0007 
....................  
.................... #define NOT_BOR          =  0x0000 
.................... #define NOT_POR          =  0x0001 
.................... #define NOT_PD           =  0x0002 
.................... #define NOT_TO           =  0x0003 
.................... #define NOT_RI           =  0x0004 
....................  
....................  
.................... //;----- WDTCON Bits ----------------------------------------------------- 
.................... #define SWDTEN           =  0x0000 
....................  
.................... #define SWDTE            =  0x0000 
....................  
....................  
.................... //;----- HLVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- LVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- OSCCON Bits ----------------------------------------------------- 
.................... #define SCS0             =  0x0000 
.................... #define SCS1             =  0x0001 
.................... #define FLTS             =  0x0002 
.................... #define OSTS             =  0x0003 
.................... #define IRCF0            =  0x0004 
.................... #define IRCF1            =  0x0005 
.................... #define IRCF2            =  0x0006 
.................... #define IDLEN            =  0x0007 
....................  
.................... #define IOFS             =  0x0002 
....................  
....................  
.................... //;----- T0CON Bits ----------------------------------------------------- 
.................... #define T0PS0            =  0x0000 
.................... #define T0PS1            =  0x0001 
.................... #define T0PS2            =  0x0002 
.................... #define T0PS3            =  0x0003 
.................... #define T0SE             =  0x0004 
.................... #define T0CS             =  0x0005 
.................... #define T016BIT          =  0x0006 
.................... #define TMR0ON           =  0x0007 
....................  
.................... #define PSA              =  0x0003 
.................... #define T08BIT           =  0x0006 
....................  
....................  
.................... //;----- STATUS Bits ----------------------------------------------------- 
.................... #define C                =  0x0000 
.................... #define DC               =  0x0001 
.................... #define Z                =  0x0002 
.................... #define OV               =  0x0003 
.................... #define N                =  0x0004 
....................  
....................  
.................... //;----- INTCON3 Bits ----------------------------------------------------- 
.................... #define INT1F            =  0x0000 
.................... #define INT2F            =  0x0001 
.................... #define INT1E            =  0x0003 
.................... #define INT2E            =  0x0004 
.................... #define INT1P            =  0x0006 
.................... #define INT2P            =  0x0007 
....................  
.................... #define INT1IF           =  0x0000 
.................... #define INT2IF           =  0x0001 
.................... #define INT1IE           =  0x0003 
.................... #define INT2IE           =  0x0004 
.................... #define INT1IP           =  0x0006 
.................... #define INT2IP           =  0x0007 
....................  
....................  
.................... //;----- INTCON2 Bits ----------------------------------------------------- 
.................... #define RBIP             =  0x0000 
.................... #define TMR0IP           =  0x0002 
.................... #define INTEDG2          =  0x0004 
.................... #define INTEDG1          =  0x0005 
.................... #define INTEDG0          =  0x0006 
.................... #define RBPU             =  0x0007 
....................  
.................... #define NOT_RBPU         =  0x0007 
....................  
....................  
.................... //;----- INTCON Bits ----------------------------------------------------- 
.................... #define RBIF             =  0x0000 
.................... #define INT0F            =  0x0001 
.................... #define TMR0IF           =  0x0002 
.................... #define RBIE             =  0x0003 
.................... #define INT0E            =  0x0004 
.................... #define TMR0IE           =  0x0005 
.................... #define PEIE             =  0x0006 
.................... #define GIE              =  0x0007 
....................  
.................... #define INT0IF           =  0x0001 
.................... #define T0IF             =  0x0002 
.................... #define INT0IE           =  0x0004 
.................... #define T0IE             =  0x0005 
.................... #define GIEL             =  0x0006 
.................... #define GIEH             =  0x0007 
....................  
....................  
.................... //;----- STKPTR Bits ----------------------------------------------------- 
.................... #define SP0              =  0x0000 
.................... #define SP1              =  0x0001 
.................... #define SP2              =  0x0002 
.................... #define SP3              =  0x0003 
.................... #define SP4              =  0x0004 
.................... #define STKUNF           =  0x0006 
.................... #define STKFUL           =  0x0007 
....................  
.................... #define STKOVF           =  0x0007 
....................  
....................  
....................  
.................... /*;========================================================================== 
.................... ; 
.................... ;       RAM Definitions 
.................... ; 
.................... ;========================================================================== 
....................        __MAXRAM  H'0FFF' 
....................        __BADRAM  H'0F83' 
....................        __BADRAM  H'0F85'-H'0F88' 
....................        __BADRAM  H'0F8C'-H'0F91' 
....................        __BADRAM  H'0F95'-H'0F9A' 
....................        __BADRAM  H'0F9C' 
....................        __BADRAM  H'0FA3'-H'0FAA' 
....................        __BADRAM  H'0FB6' 
....................        __BADRAM  H'0FB9' 
....................        __BADRAM  H'0FD4' 
....................  
.................... ;========================================================================== 
.................... ; 
.................... ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been 
.................... ;              superseded by the CONFIG directive.  The following settings 
.................... ;              are available for this device. 
.................... ; 
.................... ;   Oscillator Selection bits: 
.................... ;     OSC = LP             LP oscillator 
.................... ;     OSC = XT             XT oscillator 
.................... ;     OSC = HS             HS oscillator 
.................... ;     OSC = RC             External RC oscillator, CLKO function on RA6 
.................... ;     OSC = EC             EC oscillator, CLKO function on RA6 
.................... ;     OSC = ECIO6          EC oscillator, port function on RA6 
.................... ;     OSC = HSPLL          HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... ;     OSC = RCIO6          External RC oscillator, port function on RA6 
.................... ;     OSC = INTIO67        Internal oscillator block, port function on RA6 and RA7 
.................... ;     OSC = INTIO7         Internal oscillator block, CLKO function on RA6, port function on RA7 
.................... ; 
.................... ;   Fail-Safe Clock Monitor Enable bit: 
.................... ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled 
.................... ;     FCMEN = ON           Fail-Safe Clock Monitor enabled 
.................... ; 
.................... ;   Internal/External Oscillator Switchover bit: 
.................... ;     IESO = OFF           Oscillator Switchover mode disabled 
.................... ;     IESO = ON            Oscillator Switchover mode enabled 
.................... ; 
.................... ;   Power-up Timer Enable bit: 
.................... ;     PWRT = ON            PWRT enabled 
.................... ;     PWRT = OFF           PWRT disabled 
.................... ; 
.................... ;   Brown-out Reset Enable bits: 
.................... ;     BOREN = OFF          Brown-out Reset disabled in hardware and software 
.................... ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled) 
.................... ; 
.................... ;   Brown-out Voltage bits: 
.................... ;     BORV = 0             Maximum setting 
.................... ;     BORV = 1              
.................... ;     BORV = 2              
.................... ;     BORV = 3             Minimum setting 
.................... ; 
.................... ;   Watchdog Timer Enable bit: 
.................... ;     WDT = OFF            WDT disabled (control is placed on the SWDTEN bit) 
.................... ;     WDT = ON             WDT enabled 
.................... ; 
.................... ;   Watchdog Timer Postscale Select bits: 
.................... ;     WDTPS = 1            1:1 
.................... ;     WDTPS = 2            1:2 
.................... ;     WDTPS = 4            1:4 
.................... ;     WDTPS = 8            1:8 
.................... ;     WDTPS = 16           1:16 
.................... ;     WDTPS = 32           1:32 
.................... ;     WDTPS = 64           1:64 
.................... ;     WDTPS = 128          1:128 
.................... ;     WDTPS = 256          1:256 
.................... ;     WDTPS = 512          1:512 
.................... ;     WDTPS = 1024         1:1024 
.................... ;     WDTPS = 2048         1:2048 
.................... ;     WDTPS = 4096         1:4096 
.................... ;     WDTPS = 8192         1:8192 
.................... ;     WDTPS = 16384        1:16384 
.................... ;     WDTPS = 32768        1:32768 
.................... ; 
.................... ;   MCLR Pin Enable bit: 
.................... ;     MCLRE = OFF          RE3 input pin enabled; MCLR disabled 
.................... ;     MCLRE = ON           MCLR pin enabled; RE3 input pin disabled 
.................... ; 
.................... ;   Low-Power Timer1 Oscillator Enable bit: 
.................... ;     LPT1OSC = OFF        Timer1 configured for higher power operation 
.................... ;     LPT1OSC = ON         Timer1 configured for low-power operation 
.................... ; 
.................... ;   PORTB A/D Enable bit: 
.................... ;     PBADEN = OFF         PORTB<4:0> pins are configured as digital I/O on Reset 
.................... ;     PBADEN = ON          PORTB<4:0> pins are configured as analog input channels on Reset 
.................... ; 
.................... ;   CCP2 MUX bit: 
.................... ;     CCP2MX = PORTBE      CCP2 input/output is multiplexed with RB3 
.................... ;     CCP2MX = PORTC       CCP2 input/output is multiplexed with RC1 
.................... ; 
.................... ;   Stack Full/Underflow Reset Enable bit: 
.................... ;     STVREN = OFF         Stack full/underflow will not cause Reset 
.................... ;     STVREN = ON          Stack full/underflow will cause Reset 
.................... ; 
.................... ;   Single-Supply ICSP Enable bit: 
.................... ;     LVP = OFF            Single-Supply ICSP disabled 
.................... ;     LVP = ON             Single-Supply ICSP enabled 
.................... ; 
.................... ;   Extended Instruction Set Enable bit: 
.................... ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled 
.................... ; 
.................... ;   Background Debugger Enable bit: 
.................... ;     DEBUG = ON           Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... ;     DEBUG = OFF          Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
.................... ; 
.................... ;   Code Protection bit Block 0: 
.................... ;     CP0 = ON             Block 0 (000800-003FFFh) code-protected 
.................... ;     CP0 = OFF            Block 0 (000800-003FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 1: 
.................... ;     CP1 = ON             Block 1 (004000-007FFFh) code-protected 
.................... ;     CP1 = OFF            Block 1 (004000-007FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 2: 
.................... ;     CP2 = ON             Block 2 (008000-00BFFFh) code-protected 
.................... ;     CP2 = OFF            Block 2 (008000-00BFFFh) not code-protected 
.................... ; 
.................... ;   Boot Block Code Protection bit: 
.................... ;     CPB = ON             Boot block (000000-0007FFh) code-protected 
.................... ;     CPB = OFF            Boot block (000000-0007FFh) not code-protected 
.................... ; 
.................... ;   Write Protection bit Block 0: 
.................... ;     WRT0 = ON            Block 0 (000800-003FFFh) write-protected 
.................... ;     WRT0 = OFF           Block 0 (000800-003FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 1: 
.................... ;     WRT1 = ON            Block 1 (004000-007FFFh) write-protected 
.................... ;     WRT1 = OFF           Block 1 (004000-007FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 2: 
.................... ;     WRT2 = ON            Block 2 (008000-00BFFFh) write-protected 
.................... ;     WRT2 = OFF           Block 2 (008000-00BFFFh) not write-protected 
.................... ; 
.................... ;   Boot Block Write Protection bit: 
.................... ;     WRTB = ON            Boot block (000000-0007FFh) write-protected 
.................... ;     WRTB = OFF           Boot block (000000-0007FFh) not write-protected 
.................... ; 
.................... ;   Configuration Register Write Protection bit: 
.................... ;     WRTC = ON            Configuration registers (300000-3000FFh) write-protected 
.................... ;     WRTC = OFF           Configuration registers (300000-3000FFh) not write-protected 
.................... ; 
.................... ;   Table Read Protection bit Block 0: 
.................... ;     EBTR0 = ON           Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR0 = OFF          Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 1: 
.................... ;     EBTR1 = ON           Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR1 = OFF          Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 2: 
.................... ;     EBTR2 = ON           Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... ;     EBTR2 = OFF          Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Boot Block Table Read Protection bit: 
.................... ;     EBTRB = ON           Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... ;     EBTRB = OFF          Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;========================================================================== 
.................... ;========================================================================== 
.................... ; 
.................... ;       Configuration Bits 
.................... ; 
.................... ;   NAME            Address 
.................... ;   CONFIG1H        300001h 
.................... ;   CONFIG2L        300002h 
.................... ;   CONFIG2H        300003h 
.................... ;   CONFIG3H        300005h 
.................... ;   CONFIG4L        300006h 
.................... ;   CONFIG5L        300008h 
.................... ;   CONFIG5H        300009h 
.................... ;   CONFIG6L        30000Ah 
.................... ;   CONFIG6H        30000Bh 
.................... ;   CONFIG7L        30000Ch 
.................... ;   CONFIG7H        30000Dh 
.................... ; 
.................... ;==========================================================================*/ 
....................  
.................... //; The following is an assignment of address values for all of the 
.................... //; configuration registers for the purpose of table reads 
.................... //_CONFIG1H        =  0x300001 
.................... //_CONFIG2L        =  0x300002 
.................... //_CONFIG2H        =  0x300003 
.................... //_CONFIG3H        =  0x300005 
.................... //_CONFIG4L        =  0x300006 
.................... //_CONFIG5L        =  0x300008 
.................... //_CONFIG5H        =  0x300009 
.................... //_CONFIG6L        =  0x30000A 
.................... //_CONFIG6H        =  0x30000B 
.................... //_CONFIG7L        =  0x30000C 
.................... //_CONFIG7H        =  0x30000D 
....................  
.................... //;----- CONFIG1H Options -------------------------------------------------- 
.................... //_OSC_LP_1H           =  0xF0    //; LP oscillator 
.................... //_OSC_XT_1H           =  0xF1    //; XT oscillator 
.................... //_OSC_HS_1H           =  0xF2    //; HS oscillator 
.................... //_OSC_RC_1H           =  0xF3    //; External RC oscillator, CLKO function on RA6 
.................... //_OSC_EC_1H           =  0xF4    //; EC oscillator, CLKO function on RA6 
.................... //_OSC_ECIO6_1H        =  0xF5    //; EC oscillator, port function on RA6 
.................... //_OSC_HSPLL_1H        =  0xF6    //; HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... //_OSC_RCIO6_1H        =  0xF7    //; External RC oscillator, port function on RA6 
.................... //_OSC_INTIO67_1H      =  0xF8    //; Internal oscillator block, port function on RA6 and RA7 
.................... //_OSC_INTIO7_1H       =  0xF9    //; Internal oscillator block, CLKO function on RA6, port function on RA7 
....................  
.................... //_FCMEN_OFF_1H        =  0xBF    //; Fail-Safe Clock Monitor disabled 
.................... //_FCMEN_ON_1H         =  0xFF    //; Fail-Safe Clock Monitor enabled 
....................  
.................... //_IESO_OFF_1H         =  0x7F    //; Oscillator Switchover mode disabled 
.................... //_IESO_ON_1H          =  0xFF    //; Oscillator Switchover mode enabled 
....................  
.................... //;----- CONFIG2L Options -------------------------------------------------- 
.................... //_PWRT_ON_2L          =  0xFE    //; PWRT enabled 
.................... //_PWRT_OFF_2L         =  0xFF    //; PWRT disabled 
....................  
.................... //_BOREN_OFF_2L        =  0xF9    //; Brown-out Reset disabled in hardware and software 
.................... //_BOREN_ON_2L         =  0xFB    //; Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... //_BOREN_NOSLP_2L      =  0xFD    //; Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... //_BOREN_SBORDIS_2L    =  0xFF    //; Brown-out Reset enabled in hardware only (SBOREN is disabled) 
....................  
.................... //_BORV_0_2L           =  0xE7    //; Maximum setting 
.................... //_BORV_1_2L           =  0xEF    //;  
.................... //_BORV_2_2L           =  0xF7    //;  
.................... //_BORV_3_2L           =  0xFF    //; Minimum setting 
....................  
.................... //;----- CONFIG2H Options -------------------------------------------------- 
.................... //_WDT_OFF_2H          =  0xFE    //; WDT disabled (control is placed on the SWDTEN bit) 
.................... //_WDT_ON_2H           =  0xFF    //; WDT enabled 
....................  
.................... //_WDTPS_1_2H          =  0xE1    //; 1:1 
.................... //_WDTPS_2_2H          =  0xE3    //; 1:2 
.................... //_WDTPS_4_2H          =  0xE5    //; 1:4 
.................... //_WDTPS_8_2H          =  0xE7    //; 1:8 
.................... //_WDTPS_16_2H         =  0xE9    //; 1:16 
.................... //_WDTPS_32_2H         =  0xEB    //; 1:32 
.................... //_WDTPS_64_2H         =  0xED    //; 1:64 
.................... //_WDTPS_128_2H        =  0xEF    //; 1:128 
.................... //_WDTPS_256_2H        =  0xF1    //; 1:256 
.................... //_WDTPS_512_2H        =  0xF3    //; 1:512 
.................... //_WDTPS_1024_2H       =  0xF5    //; 1:1024 
.................... //_WDTPS_2048_2H       =  0xF7    //; 1:2048 
.................... //_WDTPS_4096_2H       =  0xF9    //; 1:4096 
.................... //_WDTPS_8192_2H       =  0xFB    //; 1:8192 
.................... //_WDTPS_16384_2H      =  0xFD    //; 1:16384 
.................... //_WDTPS_32768_2H      =  0xFF    //; 1:32768 
....................  
.................... //;----- CONFIG3H Options -------------------------------------------------- 
.................... //_MCLRE_OFF_3H        =  0x7F    //; RE3 input pin enabled; MCLR disabled 
.................... //_MCLRE_ON_3H         =  0xFF    //; MCLR pin enabled; RE3 input pin disabled 
....................  
.................... //_LPT1OSC_OFF_3H      =  0xFB    //; Timer1 configured for higher power operation 
.................... //_LPT1OSC_ON_3H       =  0xFF    //; Timer1 configured for low-power operation 
....................  
.................... //_PBADEN_OFF_3H       =  0xFD    //; PORTB<4:0> pins are configured as digital I/O on Reset 
.................... //_PBADEN_ON_3H        =  0xFF    //; PORTB<4:0> pins are configured as analog input channels on Reset 
....................  
.................... //_CCP2MX_PORTBE_3H    =  0xFE    //; CCP2 input/output is multiplexed with RB3 
.................... //_CCP2MX_PORTC_3H     =  0xFF    //; CCP2 input/output is multiplexed with RC1 
....................  
.................... //;----- CONFIG4L Options -------------------------------------------------- 
.................... //_STVREN_OFF_4L       =  0xFE    //; Stack full/underflow will not cause Reset 
.................... //_STVREN_ON_4L        =  0xFF    //; Stack full/underflow will cause Reset 
....................  
.................... //_LVP_OFF_4L          =  0xFB    //; Single-Supply ICSP disabled 
.................... //_LVP_ON_4L           =  0xFF    //; Single-Supply ICSP enabled 
....................  
.................... //_XINST_OFF_4L        =  0xBF    //; Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... //_XINST_ON_4L         =  0xFF    //; Instruction set extension and Indexed Addressing mode enabled 
....................  
.................... //_DEBUG_ON_4L         =  0x7F    //; Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... //_DEBUG_OFF_4L        =  0xFF    //; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
....................  
.................... //;----- CONFIG5L Options -------------------------------------------------- 
.................... //_CP0_ON_5L           =  0xFE    //; Block 0 (000800-003FFFh) code-protected 
.................... //_CP0_OFF_5L          =  0xFF    //; Block 0 (000800-003FFFh) not code-protected 
....................  
.................... //_CP1_ON_5L           =  0xFD    //; Block 1 (004000-007FFFh) code-protected 
.................... //_CP1_OFF_5L          =  0xFF    //; Block 1 (004000-007FFFh) not code-protected 
....................  
.................... //_CP2_ON_5L           =  0xFB    //; Block 2 (008000-00BFFFh) code-protected 
.................... //_CP2_OFF_5L          =  0xFF    //; Block 2 (008000-00BFFFh) not code-protected 
....................  
.................... //;----- CONFIG5H Options -------------------------------------------------- 
.................... //_CPB_ON_5H           =  0xBF    //; Boot block (000000-0007FFh) code-protected 
.................... //_CPB_OFF_5H          =  0xFF    //; Boot block (000000-0007FFh) not code-protected 
....................  
.................... //;----- CONFIG6L Options -------------------------------------------------- 
.................... //_WRT0_ON_6L          =  0xFE    //; Block 0 (000800-003FFFh) write-protected 
.................... //_WRT0_OFF_6L         =  0xFF    //; Block 0 (000800-003FFFh) not write-protected 
....................  
.................... //_WRT1_ON_6L          =  0xFD    //; Block 1 (004000-007FFFh) write-protected 
.................... //_WRT1_OFF_6L         =  0xFF    //; Block 1 (004000-007FFFh) not write-protected 
....................  
.................... //_WRT2_ON_6L          =  0xFB    //; Block 2 (008000-00BFFFh) write-protected 
.................... //_WRT2_OFF_6L         =  0xFF    //; Block 2 (008000-00BFFFh) not write-protected 
....................  
.................... //;----- CONFIG6H Options -------------------------------------------------- 
.................... //_WRTB_ON_6H          =  0xBF    //; Boot block (000000-0007FFh) write-protected 
.................... //_WRTB_OFF_6H         =  0xFF    //; Boot block (000000-0007FFh) not write-protected 
....................  
.................... //_WRTC_ON_6H          =  0xDF    //; Configuration registers (300000-3000FFh) write-protected 
.................... //_WRTC_OFF_6H         =  0xFF    //; Configuration registers (300000-3000FFh) not write-protected 
....................  
.................... //;----- CONFIG7L Options -------------------------------------------------- 
.................... //_EBTR0_ON_7L         =  0xFE    //; Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... //_EBTR0_OFF_7L        =  0xFF    //; Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR1_ON_7L         =  0xFD    //; Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... //_EBTR1_OFF_7L        =  0xFF    //; Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR2_ON_7L         =  0xFB    //; Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... //_EBTR2_OFF_7L        =  0xFF    //; Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
....................  
.................... //;----- CONFIG7H Options -------------------------------------------------- 
.................... //_EBTRB_ON_7H         =  0xBF    //; Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... //_EBTRB_OFF_7H        =  0xFF    //; Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
....................  
....................  
.................... //_DEVID1          =  0x3FFFFE 
.................... //_DEVID2          =  0x3FFFFF 
....................  
.................... //_IDLOC0          =  0x200000 
.................... //_IDLOC1          =  0x200001 
.................... //_IDLOC2          =  0x200002 
.................... //_IDLOC3          =  0x200003 
.................... //_IDLOC4          =  0x200004 
.................... //_IDLOC5          =  0x200005 
.................... //_IDLOC6          =  0x200006 
.................... //_IDLOC7          =  0x200007 
....................  
....................  //       LIST 
....................  
.................... #device ADC=10 
.................... //#include "stdio.h" 
.................... //#include "stdlib.h" 
.................... //#include "math.h" 
....................  
.................... // Fuses: LP,XT,HS,EC_IO,INTRC_IO,INTRC,RC_IO,RC,NOWDT,WDT,PUT,NOPUT 
.................... // Fuses: NOMCLR,MCLR,NOBROWNOUT,BROWNOUT,PROTECT,NOPROTECT,CPD,NOCPD 
.................... //#fuses INTRC_IO, NOWDT, NOPROTECT, MCLR, BROWNOUT, PUT 
.................... #use delay(clock=8000000) 
*
0174:  CLRF   FEA
0176:  MOVLW  9B
0178:  MOVWF  FE9
017A:  MOVF   FEF,W
017C:  BZ    0198
017E:  MOVLW  02
0180:  MOVWF  01
0182:  CLRF   00
0184:  DECFSZ 00,F
0186:  BRA    0184
0188:  DECFSZ 01,F
018A:  BRA    0182
018C:  MOVLW  97
018E:  MOVWF  00
0190:  DECFSZ 00,F
0192:  BRA    0190
0194:  DECFSZ FEF,F
0196:  BRA    017E
0198:  RETURN 0
.................... //#use fast_io(C) 
.................... //#use fixed_io(c_outputs=PIN_C0,PIN_C1,PIN_C2) 
....................  
.................... #zero_ram 
....................  
.................... #define SL0 PIN_A0 
.................... #define SL1 PIN_A1 
.................... #define SL2 PIN_A2 
.................... #define SL3 PIN_A3 
.................... #define SL4 PIN_A4 
.................... #define SL5 PIN_A5 
....................  
.................... #define sw_K1 PIN_C0 
.................... #define sw_K2 PIN_C1 
.................... #define sw_Sx PIN_C2 
....................  
.................... //#define SL0_H	OUTPUT_HIGH(SL0) 
....................  
.................... #define SL0_L	OUTPUT_LOW(SL0) 
.................... #define SL1_L	OUTPUT_LOW(SL1) 
.................... #define SL2_L	OUTPUT_LOW(SL2) 
.................... #define SL3_L	OUTPUT_LOW(SL3) 
.................... #define SL4_L	OUTPUT_LOW(SL4) 
.................... #define SL5_L	OUTPUT_LOW(SL5) 
....................  
.................... const char mask[6] = {0x3e,0x3d,0x3b,0x37,0x2f,0x1f}; 
.................... const char mask_kn[6] = {0x21,0x21,0x21,0x39,0x21,0x3f}; 
....................  
.................... #bit RC6=PORTC.6 
.................... #bit RC0=PORTC.0 
.................... #bit RA0=PORTA.0 
.................... void pit_bkl(void);     
.................... void pit_bykl(void); 
....................  
....................  
.................... char tek_state_rb[6]; // 
....................  
.................... char tek1_state_rb,tek2_state_rb,tek3_state_rb; 
.................... char pr_state_rb[6]; //, pr_state_ruch[5]; 
.................... char ii,ib,pr_ruk; 
.................... char kod,du_pA; 
.................... char buf_per,buf_prm,pr_wkl_pit;  
.................... char buff[100],tt,i,pr_wykl; 
.................... char pr_stab; 
.................... char tek1_ruch,tek2_ruch,tek3_ruch,tek4_ruch,tek5_ruch; 
.................... //char i_dr,mas[100],mas_prd[500],kk; 
....................  
.................... /* 
.................... #INT_TIMER0  //Приходят каждые 500 mks 
.................... void sch_wr500(void) 
.................... {  
....................   set_timer0(64536);     //184  256-(0,0005/(4/1000000))=65036 -- (500 mks)        
....................  // RC6=~RC6;  	 
....................   if (RC6==0)   RC6=1;  //RC6=~RC6; 
.................... 	else  RC6=0;  
....................   //  set_timer0(131);     //184  65536-(0,0005/(4/1000000))=65036 -- (500 mks)       
.................... }//@ 
.................... */ 
....................  
.................... #INT_TIMER1 //Приходят каждые 10ms 
.................... void Prd_kn(void)  //По SPI перед. сост. ПП и прин сообщения от STM 
.................... { 
.................... // set_timer1(63036);  //65536-(0,01/(4/1000000))=65536-10000=63036 -- (10ms)   
.................... //if (spi_data_is_in())  //true-если в порту SPI приняты данные 
.................... //  buf_prm=spi_read();  
....................  while (!(sspstat&0x01))  {} // ждем  завершения приема 
*
00F2:  BTFSS  FC7.0
00F4:  BRA    00F2
....................   buf_prm=SSPBUF;            // чтение буфера SPI 
00F6:  MOVFF  FC9,2C
....................   kod=buf_prm&0x7f; 
00FA:  MOVF   2C,W
00FC:  ANDLW  7F
00FE:  MOVWF  29
....................  
....................   if (( kod > 0)&&( kod <4))  //св.: Kan1,Kan2,Sinchr, 
0100:  MOVF   29,F
0102:  BZ    0146
0104:  MOVF   29,W
0106:  SUBLW  03
0108:  BNC   0146
....................      { 
....................       //зажигаем или гасим светодиод: 
....................       if  (buf_prm &(1 << 7)) 
010A:  BTFSS  2C.7
010C:  BRA    012A
....................            //зажигаем - (0) 
....................            switch(kod) 
010E:  MOVF   29,W
0110:  XORLW  01
0112:  BZ    011E
0114:  XORLW  03
0116:  BZ    0120
0118:  XORLW  01
011A:  BZ    0122
011C:  BRA    0128
.................... 			{ 
....................              case 1:  
....................                { 
....................                  //output_low(sw_K1);  
....................                  break;  
011E:  BRA    0128
....................                } 
....................               case 2:  
....................                { 
....................                  //output_low(sw_K2);  
....................                  break;  
0120:  BRA    0128
....................                } 
....................               case 3:  
....................                { 
....................                  output_low(sw_Sx);  
0122:  BCF    F94.2
0124:  BCF    F8B.2
....................                  break;  
0126:  BRA    0128
....................                }    
....................             default: 
....................               break;   
....................             } 
0128:  BRA    0144
....................       else    //гасим - (1) 
....................           switch(kod) 
012A:  MOVF   29,W
012C:  XORLW  01
012E:  BZ    013A
0130:  XORLW  03
0132:  BZ    013C
0134:  XORLW  01
0136:  BZ    013E
0138:  BRA    0144
.................... 			{ 
....................              case 1:  
....................                { 
....................                  //output_high(sw_K1);  
....................                  break;  
013A:  BRA    0144
....................                } 
....................               case 2:  
....................                { 
....................                  //output_high(sw_K2);  
....................                  break;  
013C:  BRA    0144
....................                } 
....................               case 3:  
....................                { 
....................                  output_high(sw_Sx);  
013E:  BCF    F94.2
0140:  BSF    F8B.2
....................                  break;  
0142:  BRA    0144
....................                }    
....................             default: 
....................               break;   
....................             } 
....................      } 
0144:  BRA    0156
....................  else 
....................    { 
....................      if ((kod==4)&&(pr_wkl_pit==1)) 
0146:  MOVF   29,W
0148:  SUBLW  04
014A:  BNZ   0156
014C:  DECFSZ 2D,W
014E:  BRA    0156
....................            {   
....................              pr_wykl=1; 
0150:  MOVLW  01
0152:  MOVWF  x94
....................              pit_bykl(); 
0154:  RCALL  00D6
....................            } 
....................     } 
....................       
....................   sspcon1=sspcon1&0x7f;   //сброс бита конфликта 
0156:  BCF    FC6.7
....................     //Буфер готов к передаче:    
....................       
....................     output_high(pin_C6);  
0158:  BCF    F94.6
015A:  BSF    F8B.6
....................    // spi_write(buf_per); //запись байта в SPI 
....................     SSPBUF=buf_per; 
015C:  MOVFF  2B,FC9
....................     buf_per=0; 
0160:  CLRF   2B
....................     output_low(pin_C6); 
0162:  BCF    F94.6
0164:  BCF    F8B.6
....................   
....................  set_timer1(45536);  //65536-(0,01/(4/8000000))=20000 -- (10ms)   
0166:  MOVLW  B1
0168:  MOVWF  FCF
016A:  MOVLW  E0
016C:  MOVWF  FCE
....................  
016E:  BCF    F9E.0
0170:  GOTO   0054
.................... }//@ 
....................  
....................  
.................... void main () 
*
01B6:  CLRF   FF8
01B8:  BCF    FD0.7
01BA:  BSF    07.7
01BC:  MOVLW  F2
01BE:  MOVWF  00
01C0:  MOVLW  0F
01C2:  MOVWF  01
01C4:  MOVLW  02
01C6:  MOVWF  FE9
01C8:  MOVLW  00
01CA:  MOVWF  FEA
01CC:  CLRF   FEE
01CE:  CLRWDT
01D0:  DECFSZ 00,F
01D2:  BRA    01CC
01D4:  DECFSZ 01,F
01D6:  BRA    01CC
01D8:  MOVLW  80
01DA:  MOVWF  00
01DC:  MOVLW  01
01DE:  MOVWF  01
01E0:  MOVLW  00
01E2:  MOVWF  FE9
01E4:  MOVLW  0F
01E6:  MOVWF  FEA
01E8:  CLRF   FEE
01EA:  CLRWDT
01EC:  DECFSZ 00,F
01EE:  BRA    01E8
01F0:  DECFSZ 01,F
01F2:  BRA    01E8
01F4:  MOVF   FC1,W
01F6:  ANDLW  C0
01F8:  IORLW  0F
01FA:  MOVWF  FC1
01FC:  MOVLW  07
01FE:  MOVWF  FB4
.................... { 
.................... disable_interrupts(GLOBAL);   //общее запрещение прерываний 
0200:  BCF    FF2.6
0202:  BCF    FF2.7
0204:  BTFSC  FF2.7
0206:  BRA    0202
.................... setup_oscillator(OSC_8MHZ);  //|OSC_INTRC 
0208:  MOVLW  70
020A:  MOVWF  FD3
020C:  MOVF   FD3,W
....................   
.................... set_tris_a(0x00);   //выходы 
020E:  MOVLW  00
0210:  MOVWF  F92
.................... set_tris_b(0xff);   //входы 
0212:  MOVLW  FF
0214:  MOVWF  F93
.................... set_tris_c(0x10);   //выходы, RC4-вход(данные от STM) 
0216:  MOVLW  10
0218:  MOVWF  F94
....................  
.................... //output_c(0x4f); 
.................... portc=0xcf; 
021A:  MOVLW  CF
021C:  MOVWF  F82
.................... porta=0x7f; 
021E:  MOVLW  7F
0220:  MOVWF  F80
.................... portb=0xff; 
0222:  SETF   F81
....................  
.................... //set_tris_c(0x10);   //выходы, RC4-вход(данные от STM) 
.................... //output_a(0x7f); 
.................... //output_b(0xff); 
....................  
.................... pit_bykl(); 
0224:  RCALL  00D6
.................... pr_wkl_pit=0;   //пр. вкл. питания (исп. для 1-го нажатия кн. "Питание") 
0226:  CLRF   2D
....................  
.................... //delay_ms(1000);  //для настройки STM 
....................  
.................... //Инициализация модуля MSSP(режим SPI) 
.................... SSPCON1=0x31; 
0228:  MOVLW  31
022A:  MOVWF  FC6
.................... SSPSTAT=0;    //0x80; 
022C:  CLRF   FC7
.................... SSPBUF=0x55; 
022E:  MOVLW  55
0230:  MOVWF  FC9
....................  
.................... //иниц. таймеров: 
.................... //t0con=0xc8; //8-ми разр 
.................... t0con=0x88; //16-ми разр счетчик 
0232:  MOVLW  88
0234:  MOVWF  FD5
.................... T1CON=0x85; 
0236:  MOVLW  85
0238:  MOVWF  FCD
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);   
023A:  MOVWF  FCD
....................  
.................... set_timer1(62286); 
023C:  MOVLW  F3
023E:  MOVWF  FCF
0240:  MOVLW  4E
0242:  MOVWF  FCE
.................... //set_timer0(64536);  
....................  
.................... //enable_interrupts(INT_TIMER2); 
.................... enable_interrupts(INT_TIMER1); 
0244:  BSF    F9D.0
.................... //enable_interrupts(INT_TIMER0); 
.................... enable_interrupts(GLOBAL); 
0246:  MOVLW  C0
0248:  IORWF  FF2,F
....................  
.................... //СОСТОЯНИЕ кнопок и ручек по ВКЛЮЧЕНИЮ: 
.................... //---------------------------------------- 
.................... for (ii=0; ii<6;ii++)  
024A:  CLRF   26
024C:  MOVF   26,W
024E:  SUBLW  05
0250:  BNC   028E
....................  { 
....................    du_pA=porta&0xc0|mask[ii]; 
0252:  MOVF   F80,W
0254:  ANDLW  C0
0256:  MOVWF  x9B
0258:  CLRF   03
025A:  MOVF   26,W
025C:  MOVFF  FF2,9C
0260:  BCF    FF2.7
0262:  RCALL  0096
0264:  BTFSC  x9C.7
0266:  BSF    FF2.7
0268:  MOVWF  01
026A:  MOVF   x9B,W
026C:  IORWF  01,W
026E:  MOVWF  2A
....................    output_a(du_pA);    
0270:  CLRF   F92
0272:  MOVFF  2A,F89
....................    pr_state_rb[ii] = input_b(); 
0276:  CLRF   03
0278:  MOVF   26,W
027A:  ADDLW  20
027C:  MOVWF  FE9
027E:  MOVLW  00
0280:  ADDWFC 03,W
0282:  MOVWF  FEA
0284:  SETF   F93
0286:  MOVFF  F81,FEF
028A:  INCF   26,F
028C:  BRA    024C
....................  } 
....................  
.................... while(1) 
.................... { 
....................   for (ii=0; ii<6;ii++)  
028E:  CLRF   26
0290:  MOVF   26,W
0292:  SUBLW  05
0294:  BTFSS  FD8.0
0296:  GOTO   0A6A
....................  {   pr_ruk=0; 
029A:  CLRF   28
....................   // output_a(mask[ii]);              //SL... -> PORTA 
....................    du_pA=(porta&0xc0)|mask[ii]; 
029C:  MOVF   F80,W
029E:  ANDLW  C0
02A0:  MOVWF  x9B
02A2:  CLRF   03
02A4:  MOVF   26,W
02A6:  MOVFF  FF2,9C
02AA:  BCF    FF2.7
02AC:  RCALL  0096
02AE:  BTFSC  x9C.7
02B0:  BSF    FF2.7
02B2:  MOVWF  01
02B4:  MOVF   x9B,W
02B6:  IORWF  01,W
02B8:  MOVWF  2A
....................    output_a(du_pA); 
02BA:  CLRF   F92
02BC:  MOVFF  2A,F89
....................    tek_state_rb[ii] = input_b(); 
02C0:  CLRF   03
02C2:  MOVF   26,W
02C4:  ADDLW  17
02C6:  MOVWF  FE9
02C8:  MOVLW  00
02CA:  ADDWFC 03,W
02CC:  MOVWF  FEA
02CE:  SETF   F93
02D0:  MOVFF  F81,FEF
....................    if (pr_state_rb[ii] ^ tek_state_rb[ii]) 
02D4:  CLRF   03
02D6:  MOVF   26,W
02D8:  ADDLW  20
02DA:  MOVWF  FE9
02DC:  MOVLW  00
02DE:  ADDWFC 03,W
02E0:  MOVWF  FEA
02E2:  MOVFF  FEF,9B
02E6:  CLRF   03
02E8:  MOVF   26,W
02EA:  ADDLW  17
02EC:  MOVWF  FE9
02EE:  MOVLW  00
02F0:  ADDWFC 03,W
02F2:  MOVWF  FEA
02F4:  MOVF   FEF,W
02F6:  XORWF  x9B,W
02F8:  BTFSC  FD8.2
02FA:  GOTO   0A54
....................        //возможно  нажатие или вращение ? 
....................     { 
....................     if ((tek_state_rb[ii]&mask_kn[ii])!=mask_kn[ii])  //если это кнопка, то отрабат. дребезг 
02FE:  CLRF   03
0300:  MOVF   26,W
0302:  ADDLW  17
0304:  MOVWF  FE9
0306:  MOVLW  00
0308:  ADDWFC 03,W
030A:  MOVWF  FEA
030C:  MOVFF  FEF,9B
0310:  CLRF   03
0312:  MOVF   26,W
0314:  MOVFF  FF2,9C
0318:  BCF    FF2.7
031A:  RCALL  00B6
031C:  BTFSC  x9C.7
031E:  BSF    FF2.7
0320:  MOVWF  01
0322:  ANDWF  x9B,F
0324:  CLRF   03
0326:  MOVF   26,W
0328:  MOVFF  FF2,9C
032C:  BCF    FF2.7
032E:  RCALL  00B6
0330:  BTFSC  x9C.7
0332:  BSF    FF2.7
0334:  MOVWF  01
0336:  SUBWF  x9B,W
0338:  BZ    0370
....................        { //кнопка 
.................... 	    delay_ms(1); 
033A:  MOVLW  01
033C:  MOVWF  x9B
033E:  RCALL  0174
.................... 	    tek1_state_rb = input_b(); 
0340:  SETF   F93
0342:  MOVFF  F81,1D
.................... 	    delay_ms(1); 
0346:  MOVLW  01
0348:  MOVWF  x9B
034A:  RCALL  0174
.................... 	    tek2_state_rb = input_b(); 
034C:  SETF   F93
034E:  MOVFF  F81,1E
.................... 	    delay_ms(1); 
0352:  MOVLW  01
0354:  MOVWF  x9B
0356:  RCALL  0174
.................... 	    tek3_state_rb = input_b(); 
0358:  SETF   F93
035A:  MOVFF  F81,1F
....................        if ((tek1_state_rb==tek2_state_rb)&&(tek2_state_rb==tek3_state_rb)) 
035E:  MOVF   1E,W
0360:  SUBWF  1D,W
0362:  BNZ   036E
0364:  MOVF   1F,W
0366:  SUBWF  1E,W
0368:  BNZ   036E
....................          pr_stab=1; 
036A:  MOVLW  01
036C:  MOVWF  x95
....................        }	 
036E:  BRA    03FA
....................    else  //ручка 
....................        { 
....................       //   tek3_state_rb = input_b(); 
....................       //   pr_stab=1; 
....................          tek1_ruch=input_b(); 
0370:  SETF   F93
0372:  MOVFF  F81,96
....................          delay_us(200); 
0376:  MOVLW  84
0378:  MOVWF  00
037A:  DECFSZ 00,F
037C:  BRA    037A
037E:  BRA    0380
0380:  NOP   
....................          tek2_ruch=input_b(); 
0382:  SETF   F93
0384:  MOVFF  F81,97
....................          delay_us(200);  
0388:  MOVLW  84
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  BRA    0392
0392:  NOP   
....................          if (tek1_ruch==tek2_ruch) 
0394:  MOVF   x97,W
0396:  SUBWF  x96,W
0398:  BNZ   03F8
....................           { 
....................           tek3_ruch=input_b(); 
039A:  SETF   F93
039C:  MOVFF  F81,98
....................           delay_us(200); 
03A0:  MOVLW  84
03A2:  MOVWF  00
03A4:  DECFSZ 00,F
03A6:  BRA    03A4
03A8:  BRA    03AA
03AA:  NOP   
....................             if (tek2_ruch==tek3_ruch) 
03AC:  MOVF   x98,W
03AE:  SUBWF  x97,W
03B0:  BNZ   03F4
....................                { 
....................                 tek4_ruch=input_b(); 
03B2:  SETF   F93
03B4:  MOVFF  F81,99
....................                 delay_us(200); 
03B8:  MOVLW  84
03BA:  MOVWF  00
03BC:  DECFSZ 00,F
03BE:  BRA    03BC
03C0:  BRA    03C2
03C2:  NOP   
....................                  if (tek3_ruch==tek4_ruch) 
03C4:  MOVF   x99,W
03C6:  SUBWF  x98,W
03C8:  BNZ   03F0
....................                   { 
.................... 	                   tek5_ruch=input_b(); 
03CA:  SETF   F93
03CC:  MOVFF  F81,9A
.................... 	                   delay_us(200); 
03D0:  MOVLW  84
03D2:  MOVWF  00
03D4:  DECFSZ 00,F
03D6:  BRA    03D4
03D8:  BRA    03DA
03DA:  NOP   
.................... 	                  if (tek4_ruch==tek5_ruch) 
03DC:  MOVF   x9A,W
03DE:  SUBWF  x99,W
03E0:  BNZ   03EC
.................... 	                     //есть стабильное изменение 
....................                          { 
.................... 	                      pr_stab=1; 
03E2:  MOVLW  01
03E4:  MOVWF  x95
....................                           tek3_state_rb=tek5_ruch; 
03E6:  MOVFF  9A,1F
....................                          } 
03EA:  BRA    03EE
....................                       else   
....................                           pr_stab=0;	                   
03EC:  CLRF   x95
....................                   } 
03EE:  BRA    03F2
....................                 else   
....................                  pr_stab=0; 
03F0:  CLRF   x95
....................                } 
03F2:  BRA    03F6
....................              else 
.................... 	           pr_stab=0;             
03F4:  CLRF   x95
....................           } 
03F6:  BRA    03FA
....................          else 
.................... 	        pr_stab=0; 
03F8:  CLRF   x95
....................     
....................        }  //ручка 
....................   
....................  if (pr_stab==1) 
03FA:  DECFSZ x95,W
03FC:  GOTO   0A54
....................     { 
....................       switch(ii)   //номер сигнала SL0,SL1,SL2,SL3,SL4,SL5 
0400:  MOVF   26,W
0402:  BZ    0426
0404:  XORLW  01
0406:  BTFSC  FD8.2
0408:  BRA    055A
040A:  XORLW  03
040C:  BTFSC  FD8.2
040E:  BRA    068C
0410:  XORLW  01
0412:  BTFSC  FD8.2
0414:  BRA    07BE
0416:  XORLW  07
0418:  BTFSC  FD8.2
041A:  BRA    08B4
041C:  XORLW  01
041E:  BTFSC  FD8.2
0420:  BRA    0978
0422:  GOTO   0A40
.................... 			{ 
....................               case 0:  //SL0 
....................                 //Кнопки K1, Ser: 
.................... 				if (!(tek3_state_rb & (1 << 0)))  { buf_per=0x81;  //№1-наж. 
0426:  BTFSC  1F.0
0428:  BRA    0446
042A:  MOVLW  81
042C:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
042E:  SETF   F93
0430:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0434:  BTFSS  1F.0
0436:  BRA    042E
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0438:  MOVF   2B,F
043A:  BTFSS  FD8.2
043C:  BRA    0438
....................                                                      buf_per=0x01;  //№1-отж. 
043E:  MOVLW  01
0440:  MOVWF  2B
....................                                                     break;  
0442:  GOTO   0A40
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x82;  //№2-наж. 
0446:  BTFSC  1F.5
0448:  BRA    0464
044A:  MOVLW  82
044C:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
044E:  SETF   F93
0450:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0454:  BTFSS  1F.5
0456:  BRA    044E
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0458:  MOVF   2B,F
045A:  BTFSS  FD8.2
045C:  BRA    0458
....................                                                      buf_per=0x02;  //№2-отж. 
045E:  MOVLW  02
0460:  MOVWF  2B
....................                                                     break;  
0462:  BRA    0A40
....................                                                   } 
....................  
....................                 //Ручки -B_K1, +B_K1 -Sm_K1, +Sm_K1: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0464:  BTFSS  1F.1
0466:  BRA    04D6
0468:  BTFSS  1F.2
046A:  BRA    04D6
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
046C:  CLRF   27
046E:  MOVF   27,W
0470:  SUBLW  01
0472:  BNC   04D6
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
0474:  MOVLW  02
0476:  MOVWF  00
0478:  MOVF   27,W
047A:  MOVWF  01
047C:  BZ    0486
047E:  BCF    FD8.0
0480:  RLCF   00,F
0482:  DECFSZ 01,F
0484:  BRA    047E
0486:  MOVF   00,W
0488:  ANDWF  1F,W
048A:  BZ    04D2
048C:  CLRF   03
048E:  MOVF   26,W
0490:  ADDLW  20
0492:  MOVWF  FE9
0494:  MOVLW  00
0496:  ADDWFC 03,W
0498:  MOVWF  FEA
049A:  MOVFF  FEF,9B
049E:  MOVLW  02
04A0:  MOVWF  00
04A2:  MOVF   27,W
04A4:  MOVWF  01
04A6:  BZ    04B0
04A8:  BCF    FD8.0
04AA:  RLCF   00,F
04AC:  DECFSZ 01,F
04AE:  BRA    04A8
04B0:  MOVF   00,W
04B2:  ANDWF  x9B,W
04B4:  BNZ   04D2
....................                              
....................                             switch(ib) 
04B6:  MOVF   27,W
04B8:  BZ    04C0
04BA:  XORLW  01
04BC:  BZ    04CA
04BE:  BRA    04D2
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
04C0:  MOVLW  01
04C2:  MOVWF  28
....................                                 buf_per=0x14;  //№20-влево  
04C4:  MOVLW  14
04C6:  MOVWF  2B
....................                                break; 
04C8:  BRA    04D2
....................  
....................                                case 1: 
....................                                 pr_ruk=1;   
04CA:  MOVLW  01
04CC:  MOVWF  28
....................                                 buf_per=0x94;  //№20-вправо 
04CE:  MOVLW  94
04D0:  MOVWF  2B
....................                                break; 
....................                             }//switch  
04D2:  INCF   27,F
04D4:  BRA    046E
....................                      } //for  ib     
....................                    } //if 
....................  
....................           //    else 
....................           //     {                  
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10)&& (!pr_ruk))   //RB3 & RB4==1 & pr_ruk=0  
04D6:  BTFSS  1F.3
04D8:  BRA    0544
04DA:  BTFSS  1F.4
04DC:  BRA    0544
04DE:  MOVF   28,F
04E0:  BNZ   0544
....................                  {   
....................                      for (ib=0; ib<2;ib++)  
04E2:  CLRF   27
04E4:  MOVF   27,W
04E6:  SUBLW  01
04E8:  BNC   0544
....................                      { 
....................                       if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
04EA:  MOVLW  08
04EC:  MOVWF  00
04EE:  MOVF   27,W
04F0:  MOVWF  01
04F2:  BZ    04FC
04F4:  BCF    FD8.0
04F6:  RLCF   00,F
04F8:  DECFSZ 01,F
04FA:  BRA    04F4
04FC:  MOVF   00,W
04FE:  ANDWF  1F,W
0500:  BZ    0540
0502:  CLRF   03
0504:  MOVF   26,W
0506:  ADDLW  20
0508:  MOVWF  FE9
050A:  MOVLW  00
050C:  ADDWFC 03,W
050E:  MOVWF  FEA
0510:  MOVFF  FEF,9B
0514:  MOVLW  08
0516:  MOVWF  00
0518:  MOVF   27,W
051A:  MOVWF  01
051C:  BZ    0526
051E:  BCF    FD8.0
0520:  RLCF   00,F
0522:  DECFSZ 01,F
0524:  BRA    051E
0526:  MOVF   00,W
0528:  ANDWF  x9B,W
052A:  BNZ   0540
....................                               
....................                             switch(ib) 
052C:  MOVF   27,W
052E:  BZ    0536
0530:  XORLW  01
0532:  BZ    053C
0534:  BRA    0540
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x15;  //№21-влево  
0536:  MOVLW  15
0538:  MOVWF  2B
....................                                 break; 
053A:  BRA    0540
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                 buf_per=0x95;  //№21-вправо 
053C:  MOVLW  95
053E:  MOVWF  2B
....................                                break; 
....................                                } 
....................                             }//switch ib 
0540:  INCF   27,F
0542:  BRA    04E4
....................                      } //for 
....................                    
....................                    } //if 
....................               
....................               pr_state_rb[ii]=tek3_state_rb;   
0544:  CLRF   03
0546:  MOVF   26,W
0548:  ADDLW  20
054A:  MOVWF  FE9
054C:  MOVLW  00
054E:  ADDWFC 03,W
0550:  MOVWF  FEA
0552:  MOVFF  1F,FEF
....................               pr_ruk=0; 
0556:  CLRF   28
.................... 			  break; 
0558:  BRA    0A40
....................                                 
....................               case 1:    //SL1 
....................                //Кнопки K2, DISP: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x83;  //№3-наж. 
055A:  BTFSC  1F.0
055C:  BRA    0578
055E:  MOVLW  83
0560:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0562:  SETF   F93
0564:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0568:  BTFSS  1F.0
056A:  BRA    0562
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
056C:  MOVF   2B,F
056E:  BTFSS  FD8.2
0570:  BRA    056C
....................                                                      buf_per=0x03;  //№2-отж. 
0572:  MOVLW  03
0574:  MOVWF  2B
....................                                                     break;  
0576:  BRA    0A40
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x84;  //№4-наж. 
0578:  BTFSC  1F.5
057A:  BRA    0596
057C:  MOVLW  84
057E:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0580:  SETF   F93
0582:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0586:  BTFSS  1F.5
0588:  BRA    0580
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
058A:  MOVF   2B,F
058C:  BTFSS  FD8.2
058E:  BRA    058A
....................                                                      buf_per=0x04;  //№4-отж. 
0590:  MOVLW  04
0592:  MOVWF  2B
....................                                                     break;  
0594:  BRA    0A40
....................                                                   } 
....................  
....................                 //Ручки -B_K2, +B_K2 -Sm_K2, +Sm_K2: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0596:  BTFSS  1F.1
0598:  BRA    0608
059A:  BTFSS  1F.2
059C:  BRA    0608
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
059E:  CLRF   27
05A0:  MOVF   27,W
05A2:  SUBLW  01
05A4:  BNC   0608
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
05A6:  MOVLW  02
05A8:  MOVWF  00
05AA:  MOVF   27,W
05AC:  MOVWF  01
05AE:  BZ    05B8
05B0:  BCF    FD8.0
05B2:  RLCF   00,F
05B4:  DECFSZ 01,F
05B6:  BRA    05B0
05B8:  MOVF   00,W
05BA:  ANDWF  1F,W
05BC:  BZ    0604
05BE:  CLRF   03
05C0:  MOVF   26,W
05C2:  ADDLW  20
05C4:  MOVWF  FE9
05C6:  MOVLW  00
05C8:  ADDWFC 03,W
05CA:  MOVWF  FEA
05CC:  MOVFF  FEF,9B
05D0:  MOVLW  02
05D2:  MOVWF  00
05D4:  MOVF   27,W
05D6:  MOVWF  01
05D8:  BZ    05E2
05DA:  BCF    FD8.0
05DC:  RLCF   00,F
05DE:  DECFSZ 01,F
05E0:  BRA    05DA
05E2:  MOVF   00,W
05E4:  ANDWF  x9B,W
05E6:  BNZ   0604
....................                               
....................                             switch(ib) 
05E8:  MOVF   27,W
05EA:  BZ    05F2
05EC:  XORLW  01
05EE:  BZ    05FC
05F0:  BRA    0604
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
05F2:  MOVLW  01
05F4:  MOVWF  28
....................                                 buf_per=0x16;  //№22-влево 
05F6:  MOVLW  16
05F8:  MOVWF  2B
....................                                break; 
05FA:  BRA    0604
....................  
....................                                case 1:  
....................                                 pr_ruk=1; 
05FC:  MOVLW  01
05FE:  MOVWF  28
....................                                 buf_per=0x96;  //№22-вправо 
0600:  MOVLW  96
0602:  MOVWF  2B
....................                                break; 
....................                             }//switch  
0604:  INCF   27,F
0606:  BRA    05A0
....................                      } //for       
....................                    } //if 
....................                  
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10) && (!pr_ruk))   //RB3 & RB4==1 & (!pr_ruk) 
0608:  BTFSS  1F.3
060A:  BRA    0676
060C:  BTFSS  1F.4
060E:  BRA    0676
0610:  MOVF   28,F
0612:  BNZ   0676
....................                  { 
....................                      for (ib=0; ib<2;ib++)  
0614:  CLRF   27
0616:  MOVF   27,W
0618:  SUBLW  01
061A:  BNC   0676
....................                    { 
....................  
....................                      if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
061C:  MOVLW  08
061E:  MOVWF  00
0620:  MOVF   27,W
0622:  MOVWF  01
0624:  BZ    062E
0626:  BCF    FD8.0
0628:  RLCF   00,F
062A:  DECFSZ 01,F
062C:  BRA    0626
062E:  MOVF   00,W
0630:  ANDWF  1F,W
0632:  BZ    0672
0634:  CLRF   03
0636:  MOVF   26,W
0638:  ADDLW  20
063A:  MOVWF  FE9
063C:  MOVLW  00
063E:  ADDWFC 03,W
0640:  MOVWF  FEA
0642:  MOVFF  FEF,9B
0646:  MOVLW  08
0648:  MOVWF  00
064A:  MOVF   27,W
064C:  MOVWF  01
064E:  BZ    0658
0650:  BCF    FD8.0
0652:  RLCF   00,F
0654:  DECFSZ 01,F
0656:  BRA    0650
0658:  MOVF   00,W
065A:  ANDWF  x9B,W
065C:  BNZ   0672
....................                               
....................                             switch(ib) 
065E:  MOVF   27,W
0660:  BZ    0668
0662:  XORLW  01
0664:  BZ    066E
0666:  BRA    0672
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x17;  //№23-влево 
0668:  MOVLW  17
066A:  MOVWF  2B
....................                                 break; 
066C:  BRA    0672
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                buf_per=0x97;  //№23-вправо 
066E:  MOVLW  97
0670:  MOVWF  2B
....................                                break; 
....................                                } 
....................                             }//switch  
0672:  INCF   27,F
0674:  BRA    0616
....................                      } //for 
....................                     
....................                    } //if 
....................             
....................               pr_state_rb[ii]=tek3_state_rb; 
0676:  CLRF   03
0678:  MOVF   26,W
067A:  ADDLW  20
067C:  MOVWF  FE9
067E:  MOVLW  00
0680:  ADDWFC 03,W
0682:  MOVWF  FEA
0684:  MOVFF  1F,FEF
....................               pr_ruk=0; 
0688:  CLRF   28
.................... 						 		                         
.................... 			  break; 
068A:  BRA    0A40
....................        
....................               case 2: //SL2 
....................                //Кнопки Raz, Pam: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x85;  //№5-наж. 
068C:  BTFSC  1F.0
068E:  BRA    06AA
0690:  MOVLW  85
0692:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0694:  SETF   F93
0696:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
069A:  BTFSS  1F.0
069C:  BRA    0694
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
069E:  MOVF   2B,F
06A0:  BTFSS  FD8.2
06A2:  BRA    069E
....................                                                      buf_per=0x05;  //№5-отж. 
06A4:  MOVLW  05
06A6:  MOVWF  2B
....................                                                     break;  
06A8:  BRA    0A40
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x86;  //№6-наж. 
06AA:  BTFSC  1F.5
06AC:  BRA    06C8
06AE:  MOVLW  86
06B0:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
06B2:  SETF   F93
06B4:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
06B8:  BTFSS  1F.5
06BA:  BRA    06B2
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
06BC:  MOVF   2B,F
06BE:  BTFSS  FD8.2
06C0:  BRA    06BC
....................                                                      buf_per=0x06;  //№6-отж. 
06C2:  MOVLW  06
06C4:  MOVWF  2B
....................                                                     break;  
06C6:  BRA    0A40
....................                                                   } 
....................                 //Ручки -T, +T -Del, +Del: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
06C8:  BTFSS  1F.1
06CA:  BRA    073A
06CC:  BTFSS  1F.2
06CE:  BRA    073A
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
06D0:  CLRF   27
06D2:  MOVF   27,W
06D4:  SUBLW  01
06D6:  BNC   073A
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
06D8:  MOVLW  02
06DA:  MOVWF  00
06DC:  MOVF   27,W
06DE:  MOVWF  01
06E0:  BZ    06EA
06E2:  BCF    FD8.0
06E4:  RLCF   00,F
06E6:  DECFSZ 01,F
06E8:  BRA    06E2
06EA:  MOVF   00,W
06EC:  ANDWF  1F,W
06EE:  BZ    0736
06F0:  CLRF   03
06F2:  MOVF   26,W
06F4:  ADDLW  20
06F6:  MOVWF  FE9
06F8:  MOVLW  00
06FA:  ADDWFC 03,W
06FC:  MOVWF  FEA
06FE:  MOVFF  FEF,9B
0702:  MOVLW  02
0704:  MOVWF  00
0706:  MOVF   27,W
0708:  MOVWF  01
070A:  BZ    0714
070C:  BCF    FD8.0
070E:  RLCF   00,F
0710:  DECFSZ 01,F
0712:  BRA    070C
0714:  MOVF   00,W
0716:  ANDWF  x9B,W
0718:  BNZ   0736
....................                               
....................                             switch(ib) 
071A:  MOVF   27,W
071C:  BZ    0724
071E:  XORLW  01
0720:  BZ    072E
0722:  BRA    0736
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
0724:  MOVLW  01
0726:  MOVWF  28
....................                                 buf_per=0x18;  //№24-влево 
0728:  MOVLW  18
072A:  MOVWF  2B
....................                                break; 
072C:  BRA    0736
....................  
....................                                case 1:  
....................                                 pr_ruk=1; 
072E:  MOVLW  01
0730:  MOVWF  28
....................                                 buf_per=0x98;  //№24-вправо 
0732:  MOVLW  98
0734:  MOVWF  2B
....................                                break; 
....................                             }//switch  
0736:  INCF   27,F
0738:  BRA    06D2
....................                      } //for       
....................                    } //if 
....................                 
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10) && (!pr_ruk))   //RB3 & RB4==1 & (!pr_ruk) 
073A:  BTFSS  1F.3
073C:  BRA    07A8
073E:  BTFSS  1F.4
0740:  BRA    07A8
0742:  MOVF   28,F
0744:  BNZ   07A8
....................                  { 
....................                      for (ib=0; ib<2;ib++)  
0746:  CLRF   27
0748:  MOVF   27,W
074A:  SUBLW  01
074C:  BNC   07A8
....................                    { 
....................  
....................                      if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
074E:  MOVLW  08
0750:  MOVWF  00
0752:  MOVF   27,W
0754:  MOVWF  01
0756:  BZ    0760
0758:  BCF    FD8.0
075A:  RLCF   00,F
075C:  DECFSZ 01,F
075E:  BRA    0758
0760:  MOVF   00,W
0762:  ANDWF  1F,W
0764:  BZ    07A4
0766:  CLRF   03
0768:  MOVF   26,W
076A:  ADDLW  20
076C:  MOVWF  FE9
076E:  MOVLW  00
0770:  ADDWFC 03,W
0772:  MOVWF  FEA
0774:  MOVFF  FEF,9B
0778:  MOVLW  08
077A:  MOVWF  00
077C:  MOVF   27,W
077E:  MOVWF  01
0780:  BZ    078A
0782:  BCF    FD8.0
0784:  RLCF   00,F
0786:  DECFSZ 01,F
0788:  BRA    0782
078A:  MOVF   00,W
078C:  ANDWF  x9B,W
078E:  BNZ   07A4
....................                               
....................                             switch(ib) 
0790:  MOVF   27,W
0792:  BZ    079A
0794:  XORLW  01
0796:  BZ    07A0
0798:  BRA    07A4
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x19;  //№25-влево 
079A:  MOVLW  19
079C:  MOVWF  2B
....................                                 break; 
079E:  BRA    07A4
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                buf_per=0x99;  //№25-вправо 
07A0:  MOVLW  99
07A2:  MOVWF  2B
....................                                break; 
....................                                } 
....................                             }//switch  
07A4:  INCF   27,F
07A6:  BRA    0748
....................                      } //for 
....................                     
....................                    } //if 
....................               pr_state_rb[ii]=tek3_state_rb;  
07A8:  CLRF   03
07AA:  MOVF   26,W
07AC:  ADDLW  20
07AE:  MOVWF  FE9
07B0:  MOVLW  00
07B2:  ADDWFC 03,W
07B4:  MOVWF  FEA
07B6:  MOVFF  1F,FEF
.................... 			  pr_ruk=0;			 		                         
07BA:  CLRF   28
.................... 			  break;  
07BC:  BRA    0A40
....................  
....................               case 3:  //SL3 
....................  
....................                //Кнопки Sinch, Pusk, Kurs, Izm: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x87;  //№7-наж. 
07BE:  BTFSC  1F.0
07C0:  BRA    07DC
07C2:  MOVLW  87
07C4:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
07C6:  SETF   F93
07C8:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
07CC:  BTFSS  1F.0
07CE:  BRA    07C6
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
07D0:  MOVF   2B,F
07D2:  BTFSS  FD8.2
07D4:  BRA    07D0
....................                                                      buf_per=0x07;  //№7-отж. 
07D6:  MOVLW  07
07D8:  MOVWF  2B
....................                                                     break;  
07DA:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 3))) { buf_per=0x88;  //№8-наж. 
07DC:  BTFSC  1F.3
07DE:  BRA    07FA
07E0:  MOVLW  88
07E2:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
07E4:  SETF   F93
07E6:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 3))); 
07EA:  BTFSS  1F.3
07EC:  BRA    07E4
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
07EE:  MOVF   2B,F
07F0:  BTFSS  FD8.2
07F2:  BRA    07EE
....................                                                      buf_per=0x08;  //№8-отж. 
07F4:  MOVLW  08
07F6:  MOVWF  2B
....................                                                     break;  
07F8:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 4))) { buf_per=0x89;  //№9-наж. 
07FA:  BTFSC  1F.4
07FC:  BRA    0818
07FE:  MOVLW  89
0800:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0802:  SETF   F93
0804:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 4))); 
0808:  BTFSS  1F.4
080A:  BRA    0802
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
080C:  MOVF   2B,F
080E:  BTFSS  FD8.2
0810:  BRA    080C
....................                                                      buf_per=0x09;  //№9-отж. 
0812:  MOVLW  09
0814:  MOVWF  2B
....................                                                     break;  
0816:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 5))) { buf_per=0x8A;  //№10-наж. 
0818:  BTFSC  1F.5
081A:  BRA    0836
081C:  MOVLW  8A
081E:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0820:  SETF   F93
0822:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0826:  BTFSS  1F.5
0828:  BRA    0820
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
082A:  MOVF   2B,F
082C:  BTFSS  FD8.2
082E:  BRA    082A
....................                                                      buf_per=0x0A;  //№10-отж. 
0830:  MOVLW  0A
0832:  MOVWF  2B
....................                                                     break;  
0834:  BRA    0A40
....................                                                   } 
....................  
....................                 //Ручки -Ur, +Ur : 
....................                 //**************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0836:  BTFSS  1F.1
0838:  BRA    08A0
083A:  BTFSS  1F.2
083C:  BRA    08A0
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
083E:  CLRF   27
0840:  MOVF   27,W
0842:  SUBLW  01
0844:  BNC   08A0
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
0846:  MOVLW  02
0848:  MOVWF  00
084A:  MOVF   27,W
084C:  MOVWF  01
084E:  BZ    0858
0850:  BCF    FD8.0
0852:  RLCF   00,F
0854:  DECFSZ 01,F
0856:  BRA    0850
0858:  MOVF   00,W
085A:  ANDWF  1F,W
085C:  BZ    089C
085E:  CLRF   03
0860:  MOVF   26,W
0862:  ADDLW  20
0864:  MOVWF  FE9
0866:  MOVLW  00
0868:  ADDWFC 03,W
086A:  MOVWF  FEA
086C:  MOVFF  FEF,9B
0870:  MOVLW  02
0872:  MOVWF  00
0874:  MOVF   27,W
0876:  MOVWF  01
0878:  BZ    0882
087A:  BCF    FD8.0
087C:  RLCF   00,F
087E:  DECFSZ 01,F
0880:  BRA    087A
0882:  MOVF   00,W
0884:  ANDWF  x9B,W
0886:  BNZ   089C
....................                               
....................                             switch(ib) 
0888:  MOVF   27,W
088A:  BZ    0892
088C:  XORLW  01
088E:  BZ    0898
0890:  BRA    089C
.................... 			                { 
....................                                case 0:  
....................                                 buf_per=0x1A;  //№26-влево 
0892:  MOVLW  1A
0894:  MOVWF  2B
....................                                break; 
0896:  BRA    089C
....................  
....................                                case 1: 
....................                                buf_per=0x9A;  //№26-вправо 
0898:  MOVLW  9A
089A:  MOVWF  2B
....................                                break; 
....................                             }//switch  
089C:  INCF   27,F
089E:  BRA    0840
....................                      } //for       
....................                    } //if 
.................... 			    pr_state_rb[ii]=tek3_state_rb; 			 		                         
08A0:  CLRF   03
08A2:  MOVF   26,W
08A4:  ADDLW  20
08A6:  MOVWF  FE9
08A8:  MOVLW  00
08AA:  ADDWFC 03,W
08AC:  MOVWF  FEA
08AE:  MOVFF  1F,FEF
.................... 			  break; 
08B2:  BRA    0A40
....................  
....................               case 4: // SL4 
....................               //Кнопки Pit, Sbor: 
.................... 				if (!(tek3_state_rb & (1 << 0)))  {  
08B4:  BTFSC  1F.0
08B6:  BRA    08DC
....................                                                     if (pr_wkl_pit==0) 
08B8:  MOVF   2D,F
08BA:  BNZ   08D0
....................                                                       {  
....................                                                        pit_bkl(); 
08BC:  BRA    019A
....................                                                        delay_ms(1);  //для настройки STM 
08BE:  MOVLW  01
08C0:  MOVWF  x9B
08C2:  RCALL  0174
....................                                                        do 
....................                                                         tek3_state_rb = input_b();  
08C4:  SETF   F93
08C6:  MOVFF  F81,1F
....................                                                         while (!(tek3_state_rb & (1 << 0))); 
08CA:  BTFSS  1F.0
08CC:  BRA    08C4
....................                                                         //отжатие произошло 
....................                                                       } 
08CE:  BRA    08DA
....................                                                     else 
....................                                                       { 
....................                                                        while (buf_per!=0) {} 
08D0:  MOVF   2B,F
08D2:  BTFSS  FD8.2
08D4:  BRA    08D0
....................                                                        buf_per=0x8B;  //№11-наж. 
08D6:  MOVLW  8B
08D8:  MOVWF  2B
....................                                                       }  
....................                                                     break;  
08DA:  BRA    0A40
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x8C;  //№12-наж. 
08DC:  BTFSC  1F.5
08DE:  BRA    08FA
08E0:  MOVLW  8C
08E2:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
08E4:  SETF   F93
08E6:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
08EA:  BTFSS  1F.5
08EC:  BRA    08E4
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
08EE:  MOVF   2B,F
08F0:  BTFSS  FD8.2
08F2:  BRA    08EE
....................                                                      buf_per=0x0C;  //№12-отж. 
08F4:  MOVLW  0C
08F6:  MOVWF  2B
....................                                                     break;  
08F8:  BRA    0A40
....................                                                   } 
....................  
....................  
....................                 //Ручки -Ur, +Ur : 
....................                 //**************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
08FA:  BTFSS  1F.1
08FC:  BRA    0964
08FE:  BTFSS  1F.2
0900:  BRA    0964
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
0902:  CLRF   27
0904:  MOVF   27,W
0906:  SUBLW  01
0908:  BNC   0964
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
090A:  MOVLW  02
090C:  MOVWF  00
090E:  MOVF   27,W
0910:  MOVWF  01
0912:  BZ    091C
0914:  BCF    FD8.0
0916:  RLCF   00,F
0918:  DECFSZ 01,F
091A:  BRA    0914
091C:  MOVF   00,W
091E:  ANDWF  1F,W
0920:  BZ    0960
0922:  CLRF   03
0924:  MOVF   26,W
0926:  ADDLW  20
0928:  MOVWF  FE9
092A:  MOVLW  00
092C:  ADDWFC 03,W
092E:  MOVWF  FEA
0930:  MOVFF  FEF,9B
0934:  MOVLW  02
0936:  MOVWF  00
0938:  MOVF   27,W
093A:  MOVWF  01
093C:  BZ    0946
093E:  BCF    FD8.0
0940:  RLCF   00,F
0942:  DECFSZ 01,F
0944:  BRA    093E
0946:  MOVF   00,W
0948:  ANDWF  x9B,W
094A:  BNZ   0960
....................                               
....................                             switch(ib) 
094C:  MOVF   27,W
094E:  BZ    0956
0950:  XORLW  01
0952:  BZ    095C
0954:  BRA    0960
.................... 			                { 
....................                                case 0:  
....................                                 buf_per=0x1B;  //№27-влево 
0956:  MOVLW  1B
0958:  MOVWF  2B
....................                                break; 
095A:  BRA    0960
....................  
....................                                case 1:  
....................                                 buf_per=0x9B;  //№27-вправо 
095C:  MOVLW  9B
095E:  MOVWF  2B
....................                                break; 
....................                             }//switch  
0960:  INCF   27,F
0962:  BRA    0904
....................                      } //for       
....................                    } //if 
.................... 			     pr_state_rb[ii]=tek3_state_rb; 			 		                         
0964:  CLRF   03
0966:  MOVF   26,W
0968:  ADDLW  20
096A:  MOVWF  FE9
096C:  MOVLW  00
096E:  ADDWFC 03,W
0970:  MOVWF  FEA
0972:  MOVFF  1F,FEF
.................... 			  break;  
0976:  BRA    0A40
....................  
....................               case 5: //SL5  
....................                //Кнопки Men,"1", "2", "3", "4", "5": 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x8D;  //№13-наж. 
0978:  BTFSC  1F.0
097A:  BRA    0996
097C:  MOVLW  8D
097E:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0980:  SETF   F93
0982:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0986:  BTFSS  1F.0
0988:  BRA    0980
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
098A:  MOVF   2B,F
098C:  BTFSS  FD8.2
098E:  BRA    098A
....................                                                      buf_per=0x0D;  //№13-отж. 
0990:  MOVLW  0D
0992:  MOVWF  2B
....................                                                     break;  
0994:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 1))) { buf_per=0x8e;  //№14-наж. 
0996:  BTFSC  1F.1
0998:  BRA    09B4
099A:  MOVLW  8E
099C:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
099E:  SETF   F93
09A0:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 1))); 
09A4:  BTFSS  1F.1
09A6:  BRA    099E
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
09A8:  MOVF   2B,F
09AA:  BTFSS  FD8.2
09AC:  BRA    09A8
....................                                                      buf_per=0x0e;  //№14-отж. 
09AE:  MOVLW  0E
09B0:  MOVWF  2B
....................                                                     break;  
09B2:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 2))) { buf_per=0x8f;  //№15-наж. 
09B4:  BTFSC  1F.2
09B6:  BRA    09D2
09B8:  MOVLW  8F
09BA:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
09BC:  SETF   F93
09BE:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 2))); 
09C2:  BTFSS  1F.2
09C4:  BRA    09BC
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
09C6:  MOVF   2B,F
09C8:  BTFSS  FD8.2
09CA:  BRA    09C6
....................                                                      buf_per=0x0f;  //№15-отж. 
09CC:  MOVLW  0F
09CE:  MOVWF  2B
....................                                                     break;  
09D0:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 3))) { buf_per=0x90;  //№16-наж. 
09D2:  BTFSC  1F.3
09D4:  BRA    09F0
09D6:  MOVLW  90
09D8:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
09DA:  SETF   F93
09DC:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 3))); 
09E0:  BTFSS  1F.3
09E2:  BRA    09DA
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
09E4:  MOVF   2B,F
09E6:  BTFSS  FD8.2
09E8:  BRA    09E4
....................                                                      buf_per=0x10;  //№16-отж. 
09EA:  MOVLW  10
09EC:  MOVWF  2B
....................                                                     break;  
09EE:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 4))) { buf_per=0x91;  //№17-наж. 
09F0:  BTFSC  1F.4
09F2:  BRA    0A0E
09F4:  MOVLW  91
09F6:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
09F8:  SETF   F93
09FA:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 4))); 
09FE:  BTFSS  1F.4
0A00:  BRA    09F8
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0A02:  MOVF   2B,F
0A04:  BTFSS  FD8.2
0A06:  BRA    0A02
....................                                                      buf_per=0x11;  //№17-отж. 
0A08:  MOVLW  11
0A0A:  MOVWF  2B
....................                                                     break;  
0A0C:  BRA    0A40
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 5))) { buf_per=0x92;  //№18-наж. 
0A0E:  BTFSC  1F.5
0A10:  BRA    0A2C
0A12:  MOVLW  92
0A14:  MOVWF  2B
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0A16:  SETF   F93
0A18:  MOVFF  F81,1F
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0A1C:  BTFSS  1F.5
0A1E:  BRA    0A16
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0A20:  MOVF   2B,F
0A22:  BTFSS  FD8.2
0A24:  BRA    0A20
....................                                                      buf_per=0x12;  //№18-отж. 
0A26:  MOVLW  12
0A28:  MOVWF  2B
....................                                                     break;  
0A2A:  BRA    0A40
....................                                                   } 
....................  
....................    
....................               pr_state_rb[ii]=tek3_state_rb; 						 		                         
0A2C:  CLRF   03
0A2E:  MOVF   26,W
0A30:  ADDLW  20
0A32:  MOVWF  FE9
0A34:  MOVLW  00
0A36:  ADDWFC 03,W
0A38:  MOVWF  FEA
0A3A:  MOVFF  1F,FEF
.................... 			  break; 
0A3E:  BRA    0A40
....................  
....................               default: 
....................               break;   
....................  
....................             }//switch(ii)  
....................       pr_state_rb[ii]=tek3_state_rb;  
0A40:  CLRF   03
0A42:  MOVF   26,W
0A44:  ADDLW  20
0A46:  MOVWF  FE9
0A48:  MOVLW  00
0A4A:  ADDWFC 03,W
0A4C:  MOVWF  FEA
0A4E:  MOVFF  1F,FEF
....................       pr_stab=0; 
0A52:  CLRF   x95
....................   } //pr_stab=1 
....................         
....................  }//if 
....................  
....................     if  (pr_wykl==1)  
0A54:  DECFSZ x94,W
0A56:  BRA    0A66
....................    { 
....................       output_low(pin_A6); 
0A58:  BCF    F92.6
0A5A:  BCF    F89.6
....................       output_high(pin_A7); 
0A5C:  BCF    F92.7
0A5E:  BSF    F89.7
....................       output_high(pin_C7); 
0A60:  BCF    F94.7
0A62:  BSF    F8B.7
....................       pr_wykl=0;    
0A64:  CLRF   x94
....................    } 
0A66:  INCF   26,F
0A68:  BRA    0290
....................    
....................       
....................  }//for (ii) 
0A6A:  BRA    028E
....................   
....................   
....................  
.................... }//while(1) 
.................... //output_bit(PIN_C3,1); 
.................... //BUF_CAP[i-1]=input(PIN_C4); 
.................... //output_bit( PIN_B2, 0);  //Ldac  в 0 
....................  
.................... //level = input_state(pin_A3); 
....................  
.................... }  //main 
....................  
0A6C:  BRA    0A6C
....................  
.................... void pit_bkl(void) 
.................... { 
....................   output_high(pin_A6); 
*
019A:  BCF    F92.6
019C:  BSF    F89.6
....................   output_high(sw_K1); 
019E:  BCF    F94.0
01A0:  BSF    F8B.0
....................  
....................     output_low(pin_A7); 
01A2:  BCF    F92.7
01A4:  BCF    F89.7
....................     output_low(sw_K2);  
01A6:  BCF    F94.1
01A8:  BCF    F8B.1
....................  
....................  
....................   output_low(pin_C7); 
01AA:  BCF    F94.7
01AC:  BCF    F8B.7
....................   pr_wkl_pit=1; 
01AE:  MOVLW  01
01B0:  MOVWF  2D
01B2:  GOTO   08BE (RETURN)
....................    
.................... } 
....................      
.................... void pit_bykl(void) 
.................... { 
....................    output_low(pin_A6); 
*
00D6:  BCF    F92.6
00D8:  BCF    F89.6
....................    output_low(sw_K1); 
00DA:  BCF    F94.0
00DC:  BCF    F8B.0
....................  
....................    output_high(pin_A7); 
00DE:  BCF    F92.7
00E0:  BSF    F89.7
....................    output_high(sw_K2);  
00E2:  BCF    F94.1
00E4:  BSF    F8B.1
....................  
....................    //output_high(sw_K1);  
....................    //output_high(sw_K2);  
....................    output_high(sw_Sx); 
00E6:  BCF    F94.2
00E8:  BSF    F8B.2
....................    output_high(pin_C7); 
00EA:  BCF    F94.7
00EC:  BSF    F8B.7
....................    pr_wkl_pit=0;  
00EE:  CLRF   2D
00F0:  RETURN 0
....................  
.................... } 

Configuration Fuses:
   Word  1: CF00   FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB
   Word  6: E00F   NOWRT NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
