CCS PCH C Compiler, Version 5.049, 5967               13-окт-19 10:23

               Filename:   C:\My\Work\stm32\S8-53\sources\PanelS8-53\pr_mn_sever.lst

               ROM used:   2514 bytes (5%)
                           Largest free fragment is 45802
               RAM used:   154 (4%) at main() level
                           154 (4%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   01C4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0108
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... //Опрос состояния кнопок и ручек. 
.................... //Состояние кнопок и ручек передается по SPI(ведущий режим) и считывается состояние светодиодов каждые 10мс  
....................  
.................... #include <18F2515.h> 
.................... //////////// Standard Header file for the PIC18F2515 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2515 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 3E,3D
00C0:  DATA 3B,37
00C2:  DATA 2F,1F
00C4:  CLRF   FF7
00C6:  ADDLW  D4
00C8:  MOVWF  FF6
00CA:  MOVLW  00
00CC:  ADDWFC FF7,F
00CE:  TBLRD*+
00D0:  MOVF   FF5,W
00D2:  RETURN 0
00D4:  DATA 21,21
00D6:  DATA 21,39
00D8:  DATA 21,3F
....................  
.................... #list 
....................  
.................... #include <P18F2515.INC> 
....................  //       LIST 
....................  
....................  
....................  //       NOLIST 
....................  
....................  
....................  //       IFNDEF __18F2515 
....................  //          MESSG "Processor-header file mismatch.  Verify selected processor." 
....................  //       ENDIF 
....................  
.................... /*;========================================================================== 
.................... ;       18xxxx Family        EQUates 
.................... ;==========================================================================*/ 
.................... #define FSR0            = 0 
.................... #define FSR1            = 1 
.................... #define FSR2            = 2 
....................  
.................... #define FAST            = 1 
....................  
.................... #define W               = 0 
.................... #define A               = 0 
.................... #define ACCESS          = 0 
.................... #define BANKED          = 1 
.................... //;========================================================================== 
....................  
.................... //;========================================================================== 
.................... //;       16Cxxx/17Cxxx Substitutions 
.................... //;========================================================================== 
....................   #define DDRA  TRISA      ; PIC17Cxxx SFR substitution 
....................   #define DDRB  TRISB      ; PIC17Cxxx SFR substitution 
....................   #define DDRC  TRISC      ; PIC17Cxxx SFR substitution 
....................   #define DDRD  TRISD      ; PIC17Cxxx SFR substitution 
....................   #define DDRE  TRISE      ; PIC17Cxxx SFR substitution 
....................  
.................... //;========================================================================== 
.................... //; 
.................... //;       Register Definitions 
.................... //; 
.................... //;========================================================================== 
....................  
.................... //;----- Register Files ----------------------------------------------------- 
.................... #byte PORTA            =  0x0F80 
.................... #byte PORTB            =  0x0F81 
.................... #byte PORTC            =  0x0F82 
.................... #byte PORTE            =  0x0F84 
.................... #byte LATA             =  0x0F89 
.................... #byte LATB             =  0x0F8A 
.................... #byte LATC             =  0x0F8B 
.................... //#byte DDRA             =  0x0F92 
.................... #byte TRISA            =  0x0F92 
.................... //#byte DDRB             =  0x0F93 
.................... #byte TRISB            =  0x0F93 
.................... //#byte DDRC             =  0x0F94 
.................... #byte TRISC            =  0x0F94 
.................... #byte OSCTUNE          =  0x0F9B 
.................... #byte PIE1             =  0x0F9D 
.................... #byte PIR1             =  0x0F9E 
.................... #byte IPR1             =  0x0F9F 
.................... #byte PIE2             =  0x0FA0 
.................... #byte PIR2             =  0x0FA1 
.................... #byte IPR2             =  0x0FA2 
.................... #byte RCSTA            =  0x0FAB 
.................... #byte TXSTA            =  0x0FAC 
.................... #byte TXREG            =  0x0FAD 
.................... #byte RCREG            =  0x0FAE 
.................... #byte SPBRG            =  0x0FAF 
.................... #byte SPBRGH           =  0x0FB0 
.................... #byte T3CON            =  0x0FB1 
.................... #byte TMR3L            =  0x0FB2 
.................... #byte TMR3H            =  0x0FB3 
.................... #byte CMCON            =  0x0FB4 
.................... #byte CVRCON           =  0x0FB5 
.................... #byte PWM1CON          =  0x0FB7 
.................... #byte BAUDCON          =  0x0FB8 
.................... #byte BAUDCTL          =  0x0FB8 
.................... #byte CCP2CON          =  0x0FBA 
.................... #byte CCPR2            =  0x0FBB 
.................... #byte CCPR2L           =  0x0FBB 
.................... #byte CCPR2H           =  0x0FBC 
.................... #byte CCP1CON          =  0x0FBD 
.................... #byte CCPR1            =  0x0FBE 
.................... #byte CCPR1L           =  0x0FBE 
.................... #byte CCPR1H           =  0x0FBF 
.................... #byte ADCON2           =  0x0FC0 
.................... #byte ADCON1           =  0x0FC1 
.................... #byte ADCON0           =  0x0FC2 
.................... #byte ADRES            =  0x0FC3 
.................... #byte ADRESL           =  0x0FC3 
.................... #byte ADRESH           =  0x0FC4 
.................... #byte SSPCON2          =  0x0FC5 
.................... #byte SSPCON1          =  0x0FC6 
.................... #byte SSPSTAT          =  0x0FC7 
.................... #byte SSPADD           =  0x0FC8 
.................... #byte SSPBUF           =  0x0FC9 
.................... #byte T2CON            =  0x0FCA 
.................... #byte PR2              =  0x0FCB 
.................... #byte TMR2             =  0x0FCC 
.................... #byte T1CON            =  0x0FCD 
.................... #byte TMR1L            =  0x0FCE 
.................... #byte TMR1H            =  0x0FCF 
.................... #byte RCON             =  0x0FD0 
.................... #byte WDTCON           =  0x0FD1 
.................... #byte HLVDCON          =  0x0FD2 
.................... #byte LVDCON           =  0x0FD2 
.................... #byte OSCCON           =  0x0FD3 
.................... #byte T0CON            =  0x0FD5 
.................... #byte TMR0L            =  0x0FD6 
.................... #byte TMR0H            =  0x0FD7 
.................... #byte STATUS           =  0x0FD8 
.................... #byte FSR2L            =  0x0FD9 
.................... #byte FSR2H            =  0x0FDA 
.................... #byte PLUSW2           =  0x0FDB 
.................... #byte PREINC2          =  0x0FDC 
.................... #byte POSTDEC2         =  0x0FDD 
.................... #byte POSTINC2         =  0x0FDE 
.................... #byte INDF2            =  0x0FDF 
.................... #byte BSR              =  0x0FE0 
.................... #byte FSR1L            =  0x0FE1 
.................... #byte FSR1H            =  0x0FE2 
.................... #byte PLUSW1           =  0x0FE3 
.................... #byte PREINC1          =  0x0FE4 
.................... #byte POSTDEC1         =  0x0FE5 
.................... #byte POSTINC1         =  0x0FE6 
.................... #byte INDF1            =  0x0FE7 
.................... #byte WREG             =  0x0FE8 
.................... #byte FSR0L            =  0x0FE9 
.................... #byte FSR0H            =  0x0FEA 
.................... #byte PLUSW0           =  0x0FEB 
.................... #byte PREINC0          =  0x0FEC 
.................... #byte POSTDEC0         =  0x0FED 
.................... #byte POSTINC0         =  0x0FEE 
.................... #byte INDF0            =  0x0FEF 
.................... #byte INTCON3          =  0x0FF0 
.................... #byte INTCON2          =  0x0FF1 
.................... #byte INTCON           =  0x0FF2 
.................... #byte PROD             =  0x0FF3 
.................... #byte PRODL            =  0x0FF3 
.................... #byte PRODH            =  0x0FF4 
.................... #byte TABLAT           =  0x0FF5 
.................... #byte TBLPTR           =  0x0FF6 
.................... #byte TBLPTRL          =  0x0FF6 
.................... #byte TBLPTRH          =  0x0FF7 
.................... #byte TBLPTRU          =  0x0FF8 
.................... #byte PC               =  0x0FF9 
.................... #byte PCL              =  0x0FF9 
.................... #byte PCLATH           =  0x0FFA 
.................... #byte PCLATU           =  0x0FFB 
.................... #byte STKPTR           =  0x0FFC 
.................... #byte TOS              =  0x0FFD 
.................... #byte TOSL             =  0x0FFD 
.................... #byte TOSH             =  0x0FFE 
.................... #byte TOSU             =  0x0FFF 
.................... /* 
.................... //;----- PORTA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
.................... #define T0CKI            =  0x0004 
.................... #define AN4              =  0x0005 
....................  
.................... #define SS               =  0x0005 
....................  
.................... #define NOT_SS           =  0x0005 
....................  
.................... #define LVDIN            =  0x0005 
....................  
.................... #define HLVDIN           =  0x0005 
....................  
....................  
.................... //;----- PORTB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
.................... #define INT0             =  0x0000 
.................... #define INT1             =  0x0001 
.................... #define INT2             =  0x0002 
.................... #define CCP2_PORTB       =  0x0003 
.................... #define KBI0             =  0x0004 
.................... #define KBI1             =  0x0005 
.................... #define KBI2             =  0x0006 
.................... #define KBI3             =  0x0007 
....................  
.................... #define AN12             =  0x0000 
.................... #define AN10             =  0x0001 
.................... #define AN8              =  0x0002 
.................... #define AN9              =  0x0003 
.................... #define AN11             =  0x0004 
.................... #define PGM              =  0x0005 
.................... #define PGC              =  0x0006 
.................... #define PGD              =  0x0007 
....................  
.................... #define DAD5             =  0x0005 
.................... #define DAD6             =  0x0006 
.................... #define DAD7             =  0x0007 
....................  
....................  
.................... //;----- PORTC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
.................... #define T1OSO            =  0x0000 
.................... #define T1OSI            =  0x0001 
.................... #define CCP1             =  0x0002 
.................... #define SCK              =  0x0003 
.................... #define SDI              =  0x0004 
.................... #define SDO              =  0x0005 
.................... #define TX               =  0x0006 
.................... #define RX               =  0x0007 
....................  
.................... #define T13CKI           =  0x0000 
.................... #define CCP2_PORTC       =  0x0001 
.................... #define SCL              =  0x0003 
.................... #define SDA              =  0x0004 
.................... #define CK               =  0x0006 
.................... //; DT is a reserved word 
.................... //; DT               EQU  H'0007' 
....................  
....................  
.................... //;----- PORTE Bits ----------------------------------------------------- 
.................... #define RE3              =  0x0003 
....................  
....................  
.................... //;----- LATA Bits ----------------------------------------------------- 
.................... #define LATA0            =  0x0000 
.................... #define LATA1            =  0x0001 
.................... #define LATA2            =  0x0002 
.................... #define LATA3            =  0x0003 
.................... #define LATA4            =  0x0004 
.................... #define LATA5            =  0x0005 
.................... #define LATA6            =  0x0006 
.................... #define LATA7            =  0x0007 
....................  
....................  
.................... //;----- LATB Bits ----------------------------------------------------- 
.................... #define LATB0            =  0x0000 
.................... #define LATB1            =  0x0001 
.................... #define LATB2            =  0x0002 
.................... #define LATB3            =  0x0003 
.................... #define LATB4            =  0x0004 
.................... #define LATB5            =  0x0005 
.................... #define LATB6            =  0x0006 
.................... #define LATB7            =  0x0007 
....................  
....................  
.................... //;----- LATC Bits ----------------------------------------------------- 
.................... #define LATC0            =  0x0000 
.................... #define LATC1            =  0x0001 
.................... #define LATC2            =  0x0002 
.................... #define LATC3            =  0x0003 
.................... #define LATC4            =  0x0004 
.................... #define LATC5            =  0x0005 
.................... #define LATC6            =  0x0006 
.................... #define LATC7            =  0x0007 
....................  
....................  
.................... //;----- DDRA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
....................  
.................... //;----- TRISA Bits ----------------------------------------------------- 
.................... #define TRISA0           =  0x0000 
.................... #define TRISA1           =  0x0001 
.................... #define TRISA2           =  0x0002 
.................... #define TRISA3           =  0x0003 
.................... #define TRISA4           =  0x0004 
.................... #define TRISA5           =  0x0005 
.................... #define TRISA6           =  0x0006 
.................... #define TRISA7           =  0x0007 
....................  
....................  
.................... //;----- DDRB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
....................  
.................... //;----- TRISB Bits ----------------------------------------------------- 
.................... #define TRISB0           =  0x0000 
.................... #define TRISB1           =  0x0001 
.................... #define TRISB2           =  0x0002 
.................... #define TRISB3           =  0x0003 
.................... #define TRISB4           =  0x0004 
.................... #define TRISB5           =  0x0005 
.................... #define TRISB6           =  0x0006 
.................... #define TRISB7           =  0x0007 
....................  
....................  
.................... //;----- DDRC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
....................  
.................... //;----- TRISC Bits ----------------------------------------------------- 
.................... #define TRISC0           =  0x0000 
.................... #define TRISC1           =  0x0001 
.................... #define TRISC2           =  0x0002 
.................... #define TRISC3           =  0x0003 
.................... #define TRISC4           =  0x0004 
.................... #define TRISC5           =  0x0005 
.................... #define TRISC6           =  0x0006 
.................... #define TRISC7           =  0x0007 
....................  
....................  
.................... //;----- OSCTUNE Bits ----------------------------------------------------- 
.................... #define TUN0             =  0x0000 
.................... #define TUN1             =  0x0001 
.................... #define TUN2             =  0x0002 
.................... #define TUN3             =  0x0003 
.................... #define TUN4             =  0x0004 
.................... #define PLLEN            =  0x0006 
.................... #define INTSRC           =  0x0007 
....................  
....................  
.................... //;----- PIE1 Bits ----------------------------------------------------- 
.................... #define TMR1IE           =  0x0000 
.................... #define TMR2IE           =  0x0001 
.................... #define CCP1IE           =  0x0002 
.................... #define SSPIE            =  0x0003 
.................... #define TXIE             =  0x0004 
.................... #define RCIE             =  0x0005 
.................... #define ADIE             =  0x0006 
....................  
....................  
.................... //;----- PIR1 Bits ----------------------------------------------------- 
.................... #define TMR1IF           =  0x0000 
.................... #define TMR2IF           =  0x0001 
.................... #define CCP1IF           =  0x0002 
.................... #define SSPIF            =  0x0003 
.................... #define TXIF             =  0x0004 
.................... #define RCIF             =  0x0005 
.................... #define ADIF             =  0x0006 
....................  
....................  
.................... //;----- IPR1 Bits ----------------------------------------------------- 
.................... #define TMR1IP           =  0x0000 
.................... #define TMR2IP           =  0x0001 
.................... #define CCP1IP           =  0x0002 
.................... #define SSPIP            =  0x0003 
.................... #define TXIP             =  0x0004 
.................... #define RCIP             =  0x0005 
.................... #define ADIP             =  0x0006 
....................  
....................  
.................... //;----- PIE2 Bits ----------------------------------------------------- 
.................... #define CCP2IE           =  0x0000 
.................... #define TMR3IE           =  0x0001 
.................... #define LVDIE            =  0x0002 
.................... #define BCLIE            =  0x0003 
.................... #define CMIE             =  0x0006 
.................... #define OSCFIE           =  0x0007 
....................  
.................... #define HLVDIE           =  0x0002 
....................  
....................  
.................... //;----- PIR2 Bits ----------------------------------------------------- 
.................... #define CCP2IF           =  0x0000 
.................... #define TMR3IF           =  0x0001 
.................... #define LVDIF            =  0x0002 
.................... #define BCLIF            =  0x0003 
.................... #define CMIF             =  0x0006 
.................... #define OSCFIF           =  0x0007 
....................  
.................... #define HLVDIF           =  0x0002 
....................  
....................  
.................... //;----- IPR2 Bits ----------------------------------------------------- 
.................... #define CCP2IP           =  0x0000 
.................... #define TMR3IP           =  0x0001 
.................... #define LVDIP            =  0x0002 
.................... #define BCLIP            =  0x0003 
.................... #define CMIP             =  0x0006 
.................... #define OSCFIP           =  0x0007 
....................  
.................... #define HLVDIP           =  0x0002 
....................  
....................  
.................... //;----- RCSTA Bits ----------------------------------------------------- 
.................... #define RX9D             =  0x0000 
.................... #define OERR             =  0x0001 
.................... #define FERR             =  0x0002 
.................... #define ADEN             =  0x0003 
.................... #define CREN             =  0x0004 
.................... #define SREN             =  0x0005 
.................... #define RX9              =  0x0006 
.................... #define SPEN             =  0x0007 
....................  
.................... #define ADDEN            =  0x0003 
....................  
....................  
.................... //;----- TXSTA Bits ----------------------------------------------------- 
.................... #define TX9D             =  0x0000 
.................... #define TRMT             =  0x0001 
.................... #define BRGH             =  0x0002 
.................... #define SENDB            =  0x0003 
.................... #define SYNC             =  0x0004 
.................... #define TXEN             =  0x0005 
.................... #define TX9              =  0x0006 
.................... #define CSRC             =  0x0007 
....................  
....................  
.................... //;----- T3CON Bits ----------------------------------------------------- 
.................... #define TMR3ON           =  0x0000 
.................... #define TMR3CS           =  0x0001 
.................... #define T3SYNC           =  0x0002 
.................... #define T3CCP1           =  0x0003 
.................... #define T3CKPS0          =  0x0004 
.................... #define T3CKPS1          =  0x0005 
.................... #define T3CCP2           =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T3SYNC       =  0x0002 
....................  
.................... //;----- CMCON Bits ----------------------------------------------------- 
.................... #define CM0              =  0x0000 
.................... #define CM1              =  0x0001 
.................... #define CM2              =  0x0002 
.................... #define CIS              =  0x0003 
.................... #define C1INV            =  0x0004 
.................... #define C2INV            =  0x0005 
.................... #define C1OUT            =  0x0006 
.................... #define C2OUT            =  0x0007 
....................  
....................  
.................... //;----- CVRCON Bits ----------------------------------------------------- 
.................... #define CVR0             =  0x0000 
.................... #define CVR1             =  0x0001 
.................... #define CVR2             =  0x0002 
.................... #define CVR3             =  0x0003 
.................... #define CVRSS            =  0x0004 
.................... #define CVRR             =  0x0005 
.................... #define CVROE            =  0x0006 
.................... #define CVREN            =  0x0007 
....................  
....................  
.................... //;----- PWM1CON Bits ----------------------------------------------------- 
.................... #define PRSEN            =  0x0007 
....................  
....................  
.................... //;----- BAUDCON Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- BAUDCTL Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- CCP2CON Bits ----------------------------------------------------- 
.................... #define CCP2M0           =  0x0000 
.................... #define CCP2M1           =  0x0001 
.................... #define CCP2M2           =  0x0002 
.................... #define CCP2M3           =  0x0003 
.................... #define CCP2Y            =  0x0004 
.................... #define CCP2X            =  0x0005 
....................  
.................... #define DC2B0            =  0x0004 
.................... #define DC2B1            =  0x0005 
....................  
....................  
.................... //;----- CCP1CON Bits ----------------------------------------------------- 
.................... #define CCP1M0           =  0x0000 
.................... #define CCP1M1           =  0x0001 
.................... #define CCP1M2           =  0x0002 
.................... #define CCP1M3           =  0x0003 
.................... #define CCP1Y            =  0x0004 
.................... #define CCP1X            =  0x0005 
....................  
.................... #define DC1B0            =  0x0004 
.................... #define DC1B1            =  0x0005 
....................  
....................  
.................... //;----- ADCON2 Bits ----------------------------------------------------- 
.................... #define ADCS0            =  0x0000 
.................... #define ADCS1            =  0x0001 
.................... #define ADCS2            =  0x0002 
.................... #define ACQT0            =  0x0003 
.................... #define ACQT1            =  0x0004 
.................... #define ACQT2            =  0x0005 
.................... #define ADFM             =  0x0007 
....................  
....................  
.................... //;----- ADCON1 Bits ----------------------------------------------------- 
.................... #define PCFG0            =  0x0000 
.................... #define PCFG1            =  0x0001 
.................... #define PCFG2            =  0x0002 
.................... #define PCFG3            =  0x0003 
.................... #define VCFG0            =  0x0004 
.................... #define VCFG1            =  0x0005 
....................  
....................  
.................... //;----- ADCON0 Bits ----------------------------------------------------- 
.................... #define ADON             =  0x0000 
.................... #define GO               =  0x0001 
.................... #define CHS0             =  0x0002 
.................... #define CHS1             =  0x0003 
.................... #define CHS2             =  0x0004 
.................... #define CHS3             =  0x0005 
....................  
.................... #define DONE             =  0x0001 
....................  
.................... #define NOT_DONE         =  0x0001 
....................  
.................... #define GO_DONE          =  0x0001 
....................  
....................  
.................... //;----- SSPCON2 Bits ----------------------------------------------------- 
.................... #define SEN              =  0x0000 
.................... #define RSEN             =  0x0001 
.................... #define PEN              =  0x0002 
.................... #define RCEN             =  0x0003 
.................... #define ACKEN            =  0x0004 
.................... #define ACKDT            =  0x0005 
.................... #define ACKSTAT          =  0x0006 
.................... #define GCEN             =  0x0007 
....................  
....................  
.................... //;----- SSPCON1 Bits ----------------------------------------------------- 
.................... #define SSPM0            =  0x0000 
.................... #define SSPM1            =  0x0001 
.................... #define SSPM2            =  0x0002 
.................... #define SSPM3            =  0x0003 
.................... #define CKP              =  0x0004 
.................... #define SSPEN            =  0x0005 
.................... #define SSPOV            =  0x0006 
.................... #define WCOL             =  0x0007 
....................  
....................  
.................... //;----- SSPSTAT Bits ----------------------------------------------------- 
.................... #define BF               =  0x0000 
.................... #define UA               =  0x0001 
.................... #define R                =  0x0002 
.................... #define S                =  0x0003 
.................... #define P                =  0x0004 
.................... #define D                =  0x0005 
.................... #define CKE              =  0x0006 
.................... #define SMP              =  0x0007 
....................  
....................  
.................... #define NOT_W            =  0x0002 
.................... #define NOT_A            =  0x0005 
....................  
.................... #define R_W              =  0x0002 
.................... #define D_A              =  0x0005 
....................  
.................... #define NOT_WRITE        =  0x0002 
.................... #define NOT_ADDRESS      =  0x0005 
....................  
....................  
.................... //;----- T2CON Bits ----------------------------------------------------- 
.................... #define T2CKPS0          =  0x0000 
.................... #define T2CKPS1          =  0x0001 
.................... #define TMR2ON           =  0x0002 
.................... #define T2OUTPS0         =  0x0003 
.................... #define T2OUTPS1         =  0x0004 
.................... #define T2OUTPS2         =  0x0005 
.................... #define T2OUTPS3         =  0x0006 
....................  
.................... #define TOUTPS0          =  0x0003 
.................... #define TOUTPS1          =  0x0004 
.................... #define TOUTPS2          =  0x0005 
.................... #define TOUTPS3          =  0x0006 
....................  
....................  
.................... //;----- T1CON Bits ----------------------------------------------------- 
.................... #define TMR1ON           =  0x0000 
.................... #define TMR1CS           =  0x0001 
.................... #define T1SYNC           =  0x0002 
.................... #define T1OSCEN          =  0x0003 
.................... #define T1CKPS0          =  0x0004 
.................... #define T1CKPS1          =  0x0005 
.................... #define T1RUN            =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T1SYNC       =  0x0002 
....................  
....................  
.................... //;----- RCON Bits ----------------------------------------------------- 
.................... #define BOR              =  0x0000 
.................... #define POR              =  0x0001 
.................... #define PD               =  0x0002 
.................... #define TO               =  0x0003 
.................... #define RI               =  0x0004 
.................... #define SBOREN           =  0x0006 
.................... #define IPEN             =  0x0007 
....................  
.................... #define NOT_BOR          =  0x0000 
.................... #define NOT_POR          =  0x0001 
.................... #define NOT_PD           =  0x0002 
.................... #define NOT_TO           =  0x0003 
.................... #define NOT_RI           =  0x0004 
....................  
....................  
.................... //;----- WDTCON Bits ----------------------------------------------------- 
.................... #define SWDTEN           =  0x0000 
....................  
.................... #define SWDTE            =  0x0000 
....................  
....................  
.................... //;----- HLVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- LVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- OSCCON Bits ----------------------------------------------------- 
.................... #define SCS0             =  0x0000 
.................... #define SCS1             =  0x0001 
.................... #define FLTS             =  0x0002 
.................... #define OSTS             =  0x0003 
.................... #define IRCF0            =  0x0004 
.................... #define IRCF1            =  0x0005 
.................... #define IRCF2            =  0x0006 
.................... #define IDLEN            =  0x0007 
....................  
.................... #define IOFS             =  0x0002 
....................  
....................  
.................... //;----- T0CON Bits ----------------------------------------------------- 
.................... #define T0PS0            =  0x0000 
.................... #define T0PS1            =  0x0001 
.................... #define T0PS2            =  0x0002 
.................... #define T0PS3            =  0x0003 
.................... #define T0SE             =  0x0004 
.................... #define T0CS             =  0x0005 
.................... #define T016BIT          =  0x0006 
.................... #define TMR0ON           =  0x0007 
....................  
.................... #define PSA              =  0x0003 
.................... #define T08BIT           =  0x0006 
....................  
....................  
.................... //;----- STATUS Bits ----------------------------------------------------- 
.................... #define C                =  0x0000 
.................... #define DC               =  0x0001 
.................... #define Z                =  0x0002 
.................... #define OV               =  0x0003 
.................... #define N                =  0x0004 
....................  
....................  
.................... //;----- INTCON3 Bits ----------------------------------------------------- 
.................... #define INT1F            =  0x0000 
.................... #define INT2F            =  0x0001 
.................... #define INT1E            =  0x0003 
.................... #define INT2E            =  0x0004 
.................... #define INT1P            =  0x0006 
.................... #define INT2P            =  0x0007 
....................  
.................... #define INT1IF           =  0x0000 
.................... #define INT2IF           =  0x0001 
.................... #define INT1IE           =  0x0003 
.................... #define INT2IE           =  0x0004 
.................... #define INT1IP           =  0x0006 
.................... #define INT2IP           =  0x0007 
....................  
....................  
.................... //;----- INTCON2 Bits ----------------------------------------------------- 
.................... #define RBIP             =  0x0000 
.................... #define TMR0IP           =  0x0002 
.................... #define INTEDG2          =  0x0004 
.................... #define INTEDG1          =  0x0005 
.................... #define INTEDG0          =  0x0006 
.................... #define RBPU             =  0x0007 
....................  
.................... #define NOT_RBPU         =  0x0007 
....................  
....................  
.................... //;----- INTCON Bits ----------------------------------------------------- 
.................... #define RBIF             =  0x0000 
.................... #define INT0F            =  0x0001 
.................... #define TMR0IF           =  0x0002 
.................... #define RBIE             =  0x0003 
.................... #define INT0E            =  0x0004 
.................... #define TMR0IE           =  0x0005 
.................... #define PEIE             =  0x0006 
.................... #define GIE              =  0x0007 
....................  
.................... #define INT0IF           =  0x0001 
.................... #define T0IF             =  0x0002 
.................... #define INT0IE           =  0x0004 
.................... #define T0IE             =  0x0005 
.................... #define GIEL             =  0x0006 
.................... #define GIEH             =  0x0007 
....................  
....................  
.................... //;----- STKPTR Bits ----------------------------------------------------- 
.................... #define SP0              =  0x0000 
.................... #define SP1              =  0x0001 
.................... #define SP2              =  0x0002 
.................... #define SP3              =  0x0003 
.................... #define SP4              =  0x0004 
.................... #define STKUNF           =  0x0006 
.................... #define STKFUL           =  0x0007 
....................  
.................... #define STKOVF           =  0x0007 
....................  
....................  
....................  
.................... /*;========================================================================== 
.................... ; 
.................... ;       RAM Definitions 
.................... ; 
.................... ;========================================================================== 
....................        __MAXRAM  H'0FFF' 
....................        __BADRAM  H'0F83' 
....................        __BADRAM  H'0F85'-H'0F88' 
....................        __BADRAM  H'0F8C'-H'0F91' 
....................        __BADRAM  H'0F95'-H'0F9A' 
....................        __BADRAM  H'0F9C' 
....................        __BADRAM  H'0FA3'-H'0FAA' 
....................        __BADRAM  H'0FB6' 
....................        __BADRAM  H'0FB9' 
....................        __BADRAM  H'0FD4' 
....................  
.................... ;========================================================================== 
.................... ; 
.................... ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been 
.................... ;              superseded by the CONFIG directive.  The following settings 
.................... ;              are available for this device. 
.................... ; 
.................... ;   Oscillator Selection bits: 
.................... ;     OSC = LP             LP oscillator 
.................... ;     OSC = XT             XT oscillator 
.................... ;     OSC = HS             HS oscillator 
.................... ;     OSC = RC             External RC oscillator, CLKO function on RA6 
.................... ;     OSC = EC             EC oscillator, CLKO function on RA6 
.................... ;     OSC = ECIO6          EC oscillator, port function on RA6 
.................... ;     OSC = HSPLL          HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... ;     OSC = RCIO6          External RC oscillator, port function on RA6 
.................... ;     OSC = INTIO67        Internal oscillator block, port function on RA6 and RA7 
.................... ;     OSC = INTIO7         Internal oscillator block, CLKO function on RA6, port function on RA7 
.................... ; 
.................... ;   Fail-Safe Clock Monitor Enable bit: 
.................... ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled 
.................... ;     FCMEN = ON           Fail-Safe Clock Monitor enabled 
.................... ; 
.................... ;   Internal/External Oscillator Switchover bit: 
.................... ;     IESO = OFF           Oscillator Switchover mode disabled 
.................... ;     IESO = ON            Oscillator Switchover mode enabled 
.................... ; 
.................... ;   Power-up Timer Enable bit: 
.................... ;     PWRT = ON            PWRT enabled 
.................... ;     PWRT = OFF           PWRT disabled 
.................... ; 
.................... ;   Brown-out Reset Enable bits: 
.................... ;     BOREN = OFF          Brown-out Reset disabled in hardware and software 
.................... ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled) 
.................... ; 
.................... ;   Brown-out Voltage bits: 
.................... ;     BORV = 0             Maximum setting 
.................... ;     BORV = 1              
.................... ;     BORV = 2              
.................... ;     BORV = 3             Minimum setting 
.................... ; 
.................... ;   Watchdog Timer Enable bit: 
.................... ;     WDT = OFF            WDT disabled (control is placed on the SWDTEN bit) 
.................... ;     WDT = ON             WDT enabled 
.................... ; 
.................... ;   Watchdog Timer Postscale Select bits: 
.................... ;     WDTPS = 1            1:1 
.................... ;     WDTPS = 2            1:2 
.................... ;     WDTPS = 4            1:4 
.................... ;     WDTPS = 8            1:8 
.................... ;     WDTPS = 16           1:16 
.................... ;     WDTPS = 32           1:32 
.................... ;     WDTPS = 64           1:64 
.................... ;     WDTPS = 128          1:128 
.................... ;     WDTPS = 256          1:256 
.................... ;     WDTPS = 512          1:512 
.................... ;     WDTPS = 1024         1:1024 
.................... ;     WDTPS = 2048         1:2048 
.................... ;     WDTPS = 4096         1:4096 
.................... ;     WDTPS = 8192         1:8192 
.................... ;     WDTPS = 16384        1:16384 
.................... ;     WDTPS = 32768        1:32768 
.................... ; 
.................... ;   MCLR Pin Enable bit: 
.................... ;     MCLRE = OFF          RE3 input pin enabled; MCLR disabled 
.................... ;     MCLRE = ON           MCLR pin enabled; RE3 input pin disabled 
.................... ; 
.................... ;   Low-Power Timer1 Oscillator Enable bit: 
.................... ;     LPT1OSC = OFF        Timer1 configured for higher power operation 
.................... ;     LPT1OSC = ON         Timer1 configured for low-power operation 
.................... ; 
.................... ;   PORTB A/D Enable bit: 
.................... ;     PBADEN = OFF         PORTB<4:0> pins are configured as digital I/O on Reset 
.................... ;     PBADEN = ON          PORTB<4:0> pins are configured as analog input channels on Reset 
.................... ; 
.................... ;   CCP2 MUX bit: 
.................... ;     CCP2MX = PORTBE      CCP2 input/output is multiplexed with RB3 
.................... ;     CCP2MX = PORTC       CCP2 input/output is multiplexed with RC1 
.................... ; 
.................... ;   Stack Full/Underflow Reset Enable bit: 
.................... ;     STVREN = OFF         Stack full/underflow will not cause Reset 
.................... ;     STVREN = ON          Stack full/underflow will cause Reset 
.................... ; 
.................... ;   Single-Supply ICSP Enable bit: 
.................... ;     LVP = OFF            Single-Supply ICSP disabled 
.................... ;     LVP = ON             Single-Supply ICSP enabled 
.................... ; 
.................... ;   Extended Instruction Set Enable bit: 
.................... ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled 
.................... ; 
.................... ;   Background Debugger Enable bit: 
.................... ;     DEBUG = ON           Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... ;     DEBUG = OFF          Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
.................... ; 
.................... ;   Code Protection bit Block 0: 
.................... ;     CP0 = ON             Block 0 (000800-003FFFh) code-protected 
.................... ;     CP0 = OFF            Block 0 (000800-003FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 1: 
.................... ;     CP1 = ON             Block 1 (004000-007FFFh) code-protected 
.................... ;     CP1 = OFF            Block 1 (004000-007FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 2: 
.................... ;     CP2 = ON             Block 2 (008000-00BFFFh) code-protected 
.................... ;     CP2 = OFF            Block 2 (008000-00BFFFh) not code-protected 
.................... ; 
.................... ;   Boot Block Code Protection bit: 
.................... ;     CPB = ON             Boot block (000000-0007FFh) code-protected 
.................... ;     CPB = OFF            Boot block (000000-0007FFh) not code-protected 
.................... ; 
.................... ;   Write Protection bit Block 0: 
.................... ;     WRT0 = ON            Block 0 (000800-003FFFh) write-protected 
.................... ;     WRT0 = OFF           Block 0 (000800-003FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 1: 
.................... ;     WRT1 = ON            Block 1 (004000-007FFFh) write-protected 
.................... ;     WRT1 = OFF           Block 1 (004000-007FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 2: 
.................... ;     WRT2 = ON            Block 2 (008000-00BFFFh) write-protected 
.................... ;     WRT2 = OFF           Block 2 (008000-00BFFFh) not write-protected 
.................... ; 
.................... ;   Boot Block Write Protection bit: 
.................... ;     WRTB = ON            Boot block (000000-0007FFh) write-protected 
.................... ;     WRTB = OFF           Boot block (000000-0007FFh) not write-protected 
.................... ; 
.................... ;   Configuration Register Write Protection bit: 
.................... ;     WRTC = ON            Configuration registers (300000-3000FFh) write-protected 
.................... ;     WRTC = OFF           Configuration registers (300000-3000FFh) not write-protected 
.................... ; 
.................... ;   Table Read Protection bit Block 0: 
.................... ;     EBTR0 = ON           Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR0 = OFF          Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 1: 
.................... ;     EBTR1 = ON           Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR1 = OFF          Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 2: 
.................... ;     EBTR2 = ON           Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... ;     EBTR2 = OFF          Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Boot Block Table Read Protection bit: 
.................... ;     EBTRB = ON           Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... ;     EBTRB = OFF          Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;========================================================================== 
.................... ;========================================================================== 
.................... ; 
.................... ;       Configuration Bits 
.................... ; 
.................... ;   NAME            Address 
.................... ;   CONFIG1H        300001h 
.................... ;   CONFIG2L        300002h 
.................... ;   CONFIG2H        300003h 
.................... ;   CONFIG3H        300005h 
.................... ;   CONFIG4L        300006h 
.................... ;   CONFIG5L        300008h 
.................... ;   CONFIG5H        300009h 
.................... ;   CONFIG6L        30000Ah 
.................... ;   CONFIG6H        30000Bh 
.................... ;   CONFIG7L        30000Ch 
.................... ;   CONFIG7H        30000Dh 
.................... ; 
.................... ;==========================================================================*/ 
....................  
.................... //; The following is an assignment of address values for all of the 
.................... //; configuration registers for the purpose of table reads 
.................... //_CONFIG1H        =  0x300001 
.................... //_CONFIG2L        =  0x300002 
.................... //_CONFIG2H        =  0x300003 
.................... //_CONFIG3H        =  0x300005 
.................... //_CONFIG4L        =  0x300006 
.................... //_CONFIG5L        =  0x300008 
.................... //_CONFIG5H        =  0x300009 
.................... //_CONFIG6L        =  0x30000A 
.................... //_CONFIG6H        =  0x30000B 
.................... //_CONFIG7L        =  0x30000C 
.................... //_CONFIG7H        =  0x30000D 
....................  
.................... //;----- CONFIG1H Options -------------------------------------------------- 
.................... //_OSC_LP_1H           =  0xF0    //; LP oscillator 
.................... //_OSC_XT_1H           =  0xF1    //; XT oscillator 
.................... //_OSC_HS_1H           =  0xF2    //; HS oscillator 
.................... //_OSC_RC_1H           =  0xF3    //; External RC oscillator, CLKO function on RA6 
.................... //_OSC_EC_1H           =  0xF4    //; EC oscillator, CLKO function on RA6 
.................... //_OSC_ECIO6_1H        =  0xF5    //; EC oscillator, port function on RA6 
.................... //_OSC_HSPLL_1H        =  0xF6    //; HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... //_OSC_RCIO6_1H        =  0xF7    //; External RC oscillator, port function on RA6 
.................... //_OSC_INTIO67_1H      =  0xF8    //; Internal oscillator block, port function on RA6 and RA7 
.................... //_OSC_INTIO7_1H       =  0xF9    //; Internal oscillator block, CLKO function on RA6, port function on RA7 
....................  
.................... //_FCMEN_OFF_1H        =  0xBF    //; Fail-Safe Clock Monitor disabled 
.................... //_FCMEN_ON_1H         =  0xFF    //; Fail-Safe Clock Monitor enabled 
....................  
.................... //_IESO_OFF_1H         =  0x7F    //; Oscillator Switchover mode disabled 
.................... //_IESO_ON_1H          =  0xFF    //; Oscillator Switchover mode enabled 
....................  
.................... //;----- CONFIG2L Options -------------------------------------------------- 
.................... //_PWRT_ON_2L          =  0xFE    //; PWRT enabled 
.................... //_PWRT_OFF_2L         =  0xFF    //; PWRT disabled 
....................  
.................... //_BOREN_OFF_2L        =  0xF9    //; Brown-out Reset disabled in hardware and software 
.................... //_BOREN_ON_2L         =  0xFB    //; Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... //_BOREN_NOSLP_2L      =  0xFD    //; Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... //_BOREN_SBORDIS_2L    =  0xFF    //; Brown-out Reset enabled in hardware only (SBOREN is disabled) 
....................  
.................... //_BORV_0_2L           =  0xE7    //; Maximum setting 
.................... //_BORV_1_2L           =  0xEF    //;  
.................... //_BORV_2_2L           =  0xF7    //;  
.................... //_BORV_3_2L           =  0xFF    //; Minimum setting 
....................  
.................... //;----- CONFIG2H Options -------------------------------------------------- 
.................... //_WDT_OFF_2H          =  0xFE    //; WDT disabled (control is placed on the SWDTEN bit) 
.................... //_WDT_ON_2H           =  0xFF    //; WDT enabled 
....................  
.................... //_WDTPS_1_2H          =  0xE1    //; 1:1 
.................... //_WDTPS_2_2H          =  0xE3    //; 1:2 
.................... //_WDTPS_4_2H          =  0xE5    //; 1:4 
.................... //_WDTPS_8_2H          =  0xE7    //; 1:8 
.................... //_WDTPS_16_2H         =  0xE9    //; 1:16 
.................... //_WDTPS_32_2H         =  0xEB    //; 1:32 
.................... //_WDTPS_64_2H         =  0xED    //; 1:64 
.................... //_WDTPS_128_2H        =  0xEF    //; 1:128 
.................... //_WDTPS_256_2H        =  0xF1    //; 1:256 
.................... //_WDTPS_512_2H        =  0xF3    //; 1:512 
.................... //_WDTPS_1024_2H       =  0xF5    //; 1:1024 
.................... //_WDTPS_2048_2H       =  0xF7    //; 1:2048 
.................... //_WDTPS_4096_2H       =  0xF9    //; 1:4096 
.................... //_WDTPS_8192_2H       =  0xFB    //; 1:8192 
.................... //_WDTPS_16384_2H      =  0xFD    //; 1:16384 
.................... //_WDTPS_32768_2H      =  0xFF    //; 1:32768 
....................  
.................... //;----- CONFIG3H Options -------------------------------------------------- 
.................... //_MCLRE_OFF_3H        =  0x7F    //; RE3 input pin enabled; MCLR disabled 
.................... //_MCLRE_ON_3H         =  0xFF    //; MCLR pin enabled; RE3 input pin disabled 
....................  
.................... //_LPT1OSC_OFF_3H      =  0xFB    //; Timer1 configured for higher power operation 
.................... //_LPT1OSC_ON_3H       =  0xFF    //; Timer1 configured for low-power operation 
....................  
.................... //_PBADEN_OFF_3H       =  0xFD    //; PORTB<4:0> pins are configured as digital I/O on Reset 
.................... //_PBADEN_ON_3H        =  0xFF    //; PORTB<4:0> pins are configured as analog input channels on Reset 
....................  
.................... //_CCP2MX_PORTBE_3H    =  0xFE    //; CCP2 input/output is multiplexed with RB3 
.................... //_CCP2MX_PORTC_3H     =  0xFF    //; CCP2 input/output is multiplexed with RC1 
....................  
.................... //;----- CONFIG4L Options -------------------------------------------------- 
.................... //_STVREN_OFF_4L       =  0xFE    //; Stack full/underflow will not cause Reset 
.................... //_STVREN_ON_4L        =  0xFF    //; Stack full/underflow will cause Reset 
....................  
.................... //_LVP_OFF_4L          =  0xFB    //; Single-Supply ICSP disabled 
.................... //_LVP_ON_4L           =  0xFF    //; Single-Supply ICSP enabled 
....................  
.................... //_XINST_OFF_4L        =  0xBF    //; Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... //_XINST_ON_4L         =  0xFF    //; Instruction set extension and Indexed Addressing mode enabled 
....................  
.................... //_DEBUG_ON_4L         =  0x7F    //; Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... //_DEBUG_OFF_4L        =  0xFF    //; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
....................  
.................... //;----- CONFIG5L Options -------------------------------------------------- 
.................... //_CP0_ON_5L           =  0xFE    //; Block 0 (000800-003FFFh) code-protected 
.................... //_CP0_OFF_5L          =  0xFF    //; Block 0 (000800-003FFFh) not code-protected 
....................  
.................... //_CP1_ON_5L           =  0xFD    //; Block 1 (004000-007FFFh) code-protected 
.................... //_CP1_OFF_5L          =  0xFF    //; Block 1 (004000-007FFFh) not code-protected 
....................  
.................... //_CP2_ON_5L           =  0xFB    //; Block 2 (008000-00BFFFh) code-protected 
.................... //_CP2_OFF_5L          =  0xFF    //; Block 2 (008000-00BFFFh) not code-protected 
....................  
.................... //;----- CONFIG5H Options -------------------------------------------------- 
.................... //_CPB_ON_5H           =  0xBF    //; Boot block (000000-0007FFh) code-protected 
.................... //_CPB_OFF_5H          =  0xFF    //; Boot block (000000-0007FFh) not code-protected 
....................  
.................... //;----- CONFIG6L Options -------------------------------------------------- 
.................... //_WRT0_ON_6L          =  0xFE    //; Block 0 (000800-003FFFh) write-protected 
.................... //_WRT0_OFF_6L         =  0xFF    //; Block 0 (000800-003FFFh) not write-protected 
....................  
.................... //_WRT1_ON_6L          =  0xFD    //; Block 1 (004000-007FFFh) write-protected 
.................... //_WRT1_OFF_6L         =  0xFF    //; Block 1 (004000-007FFFh) not write-protected 
....................  
.................... //_WRT2_ON_6L          =  0xFB    //; Block 2 (008000-00BFFFh) write-protected 
.................... //_WRT2_OFF_6L         =  0xFF    //; Block 2 (008000-00BFFFh) not write-protected 
....................  
.................... //;----- CONFIG6H Options -------------------------------------------------- 
.................... //_WRTB_ON_6H          =  0xBF    //; Boot block (000000-0007FFh) write-protected 
.................... //_WRTB_OFF_6H         =  0xFF    //; Boot block (000000-0007FFh) not write-protected 
....................  
.................... //_WRTC_ON_6H          =  0xDF    //; Configuration registers (300000-3000FFh) write-protected 
.................... //_WRTC_OFF_6H         =  0xFF    //; Configuration registers (300000-3000FFh) not write-protected 
....................  
.................... //;----- CONFIG7L Options -------------------------------------------------- 
.................... //_EBTR0_ON_7L         =  0xFE    //; Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... //_EBTR0_OFF_7L        =  0xFF    //; Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR1_ON_7L         =  0xFD    //; Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... //_EBTR1_OFF_7L        =  0xFF    //; Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR2_ON_7L         =  0xFB    //; Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... //_EBTR2_OFF_7L        =  0xFF    //; Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
....................  
.................... //;----- CONFIG7H Options -------------------------------------------------- 
.................... //_EBTRB_ON_7H         =  0xBF    //; Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... //_EBTRB_OFF_7H        =  0xFF    //; Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
....................  
....................  
.................... //_DEVID1          =  0x3FFFFE 
.................... //_DEVID2          =  0x3FFFFF 
....................  
.................... //_IDLOC0          =  0x200000 
.................... //_IDLOC1          =  0x200001 
.................... //_IDLOC2          =  0x200002 
.................... //_IDLOC3          =  0x200003 
.................... //_IDLOC4          =  0x200004 
.................... //_IDLOC5          =  0x200005 
.................... //_IDLOC6          =  0x200006 
.................... //_IDLOC7          =  0x200007 
....................  
....................  //       LIST 
....................  
.................... #device ADC=10 
.................... //#include "stdio.h" 
.................... //#include "stdlib.h" 
.................... //#include "math.h" 
....................  
.................... // Fuses: LP,XT,HS,EC_IO,INTRC_IO,INTRC,RC_IO,RC,NOWDT,WDT,PUT,NOPUT 
.................... // Fuses: NOMCLR,MCLR,NOBROWNOUT,BROWNOUT,PROTECT,NOPROTECT,CPD,NOCPD 
.................... //#fuses INTRC_IO, NOWDT, NOPROTECT, MCLR, BROWNOUT, PUT 
.................... #use delay(clock=8000000) 
*
019E:  CLRF   FEA
01A0:  MOVLW  99
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01C2
01A8:  MOVLW  02
01AA:  MOVWF  01
01AC:  CLRF   00
01AE:  DECFSZ 00,F
01B0:  BRA    01AE
01B2:  DECFSZ 01,F
01B4:  BRA    01AC
01B6:  MOVLW  97
01B8:  MOVWF  00
01BA:  DECFSZ 00,F
01BC:  BRA    01BA
01BE:  DECFSZ FEF,F
01C0:  BRA    01A8
01C2:  RETURN 0
.................... //#use fast_io(C) 
.................... //#use fixed_io(c_outputs=PIN_C0,PIN_C1,PIN_C2) 
....................  
.................... #zero_ram 
....................  
.................... #define SL0 PIN_A0 
.................... #define SL1 PIN_A1 
.................... #define SL2 PIN_A2 
.................... #define SL3 PIN_A3 
.................... #define SL4 PIN_A4 
.................... #define SL5 PIN_A5 
....................  
.................... #define sw_K1 PIN_C0 
.................... #define sw_K2 PIN_C1 
.................... #define sw_Sx PIN_C2 
....................  
.................... //#define SL0_H	OUTPUT_HIGH(SL0) 
....................  
.................... #define SL0_L	OUTPUT_LOW(SL0) 
.................... #define SL1_L	OUTPUT_LOW(SL1) 
.................... #define SL2_L	OUTPUT_LOW(SL2) 
.................... #define SL3_L	OUTPUT_LOW(SL3) 
.................... #define SL4_L	OUTPUT_LOW(SL4) 
.................... #define SL5_L	OUTPUT_LOW(SL5) 
....................  
.................... const char mask[6] = {0x3e,0x3d,0x3b,0x37,0x2f,0x1f}; 
.................... const char mask_kn[6] = {0x21,0x21,0x21,0x39,0x21,0x3f}; 
....................  
.................... #bit RC6=PORTC.6 
.................... #bit RC0=PORTC.0 
.................... #bit RA0=PORTA.0 
.................... void pit_bkl(void);     
.................... void pit_bykl(void); 
....................  
....................  
.................... char tek_state_rb[6]; //, tek_state_ruch[5]; 
.................... char tek1_state_rb,tek2_state_rb,tek3_state_rb; 
.................... char pr_state_rb[6]; //, pr_state_ruch[5]; 
.................... char ii,ib,pr_ruk; 
.................... char kod,du_pA; 
.................... char buf_per,buf_prm,pr_wkl_pit;  
.................... char buff[100],tt,i,pr_wykl; 
.................... /* 
.................... #INT_TIMER0  //Приходят каждые 500 mks 
.................... void sch_wr500(void) 
.................... {  
....................   set_timer0(64536);     //184  256-(0,0005/(4/1000000))=65036 -- (500 mks)        
....................  // RC6=~RC6;  	 
....................   if (RC6==0)   RC6=1;  //RC6=~RC6; 
.................... 	else  RC6=0;  
....................   //  set_timer0(131);     //184  65536-(0,0005/(4/1000000))=65036 -- (500 mks)       
.................... }//@ 
.................... */ 
....................  
.................... #INT_TIMER1 //Приходят каждые 10ms 
.................... void Prd_kn(void)  //По SPI перед. сост. ПП и прин сообщения от STM 
.................... { 
.................... // set_timer1(63036);  //65536-(0,01/(4/1000000))=65536-10000=63036 -- (10ms)   
.................... //if (spi_data_is_in())  //true-если в порту SPI приняты данные 
.................... //  buf_prm=spi_read();  
....................  while (!(sspstat&0x01))  {} // ждем  завершения приема 
*
0108:  BTFSS  FC7.0
010A:  BRA    0108
....................   buf_prm=SSPBUF;            // чтение буфера SPI 
010C:  MOVFF  FC9,2F
....................   kod=buf_prm&0x7f; 
0110:  MOVF   2F,W
0112:  ANDLW  7F
0114:  MOVWF  2C
....................  
....................   if (( kod > 0)&&( kod <4))  //св.: Kan1,Kan2,Sinchr, 
0116:  MOVF   2C,F
0118:  BZ    016C
011A:  MOVF   2C,W
011C:  SUBLW  03
011E:  BNC   016C
....................      { 
....................       //зажигаем или гасим светодиод: 
....................       if  (buf_prm &(1 << 7)) 
0120:  BTFSS  2F.7
0122:  BRA    0148
....................            //зажигаем - (0) 
....................            switch(kod) 
0124:  MOVF   2C,W
0126:  XORLW  01
0128:  BZ    0134
012A:  XORLW  03
012C:  BZ    013A
012E:  XORLW  01
0130:  BZ    0140
0132:  BRA    0146
.................... 			{ 
....................              case 1:  
....................                { 
....................                  output_low(sw_K1);  
0134:  BCF    F94.0
0136:  BCF    F8B.0
....................                  break;  
0138:  BRA    0146
....................                } 
....................               case 2:  
....................                { 
....................                  output_low(sw_K2);  
013A:  BCF    F94.1
013C:  BCF    F8B.1
....................                  break;  
013E:  BRA    0146
....................                } 
....................               case 3:  
....................                { 
....................                  output_low(sw_Sx);  
0140:  BCF    F94.2
0142:  BCF    F8B.2
....................                  break;  
0144:  BRA    0146
....................                }    
....................             default: 
....................               break;   
....................             } 
0146:  BRA    016A
....................       else    //гасим - (1) 
....................           switch(kod) 
0148:  MOVF   2C,W
014A:  XORLW  01
014C:  BZ    0158
014E:  XORLW  03
0150:  BZ    015E
0152:  XORLW  01
0154:  BZ    0164
0156:  BRA    016A
.................... 			{ 
....................              case 1:  
....................                { 
....................                  output_high(sw_K1);  
0158:  BCF    F94.0
015A:  BSF    F8B.0
....................                  break;  
015C:  BRA    016A
....................                } 
....................               case 2:  
....................                { 
....................                  output_high(sw_K2);  
015E:  BCF    F94.1
0160:  BSF    F8B.1
....................                  break;  
0162:  BRA    016A
....................                } 
....................               case 3:  
....................                { 
....................                  output_high(sw_Sx);  
0164:  BCF    F94.2
0166:  BSF    F8B.2
....................                  break;  
0168:  BRA    016A
....................                }    
....................             default: 
....................               break;   
....................             } 
....................      } 
016A:  BRA    0180
....................  else 
....................    { 
....................      if ( kod==4) 
016C:  MOVF   2C,W
016E:  SUBLW  04
0170:  BNZ   0180
....................        if  (buf_prm&0x80) 
0172:  BTFSS  2F.7
0174:  BRA    017A
....................                pit_bkl(); 
0176:  RCALL  00DA
0178:  BRA    0180
....................        else 
....................            {   
....................              pr_wykl=1; 
017A:  MOVLW  01
017C:  MOVWF  x97
....................              pit_bykl(); 
017E:  RCALL  00EC
....................            } 
....................    } 
....................      /*    { 
....................           output_low(pin_A6); 
....................           output_high(pin_A7); 
....................           output_high(sw_K1);  
....................           output_high(sw_K2);  
....................           output_high(sw_Sx); 
....................     
....................           output_low(pin_C7); 
....................  
....................          porta=porta&0xbf;  //повторно !! 
....................          porta=porta|0x80; 
....................          pr_wkl_pit=0;  
....................          } 
....................     */ 
....................   sspcon1=sspcon1&0x7f;   //сброс бита конфликта 
0180:  BCF    FC6.7
....................     //Буфер готов к передаче:    
....................       
....................     output_high(pin_C6);  
0182:  BCF    F94.6
0184:  BSF    F8B.6
....................    // spi_write(buf_per); //запись байта в SPI 
....................     SSPBUF=buf_per; 
0186:  MOVFF  2E,FC9
....................     buf_per=0; 
018A:  CLRF   2E
....................     output_low(pin_C6); 
018C:  BCF    F94.6
018E:  BCF    F8B.6
....................   
....................  set_timer1(45536);  //65536-(0,01/(4/8000000))=20000 -- (10ms)   
0190:  MOVLW  B1
0192:  MOVWF  FCF
0194:  MOVLW  E0
0196:  MOVWF  FCE
....................  
0198:  BCF    F9E.0
019A:  GOTO   0060
.................... }//@ 
....................  
....................  
.................... void main () 
*
01C4:  CLRF   FF8
01C6:  BCF    FD0.7
01C8:  BSF    07.7
01CA:  MOVLW  F2
01CC:  MOVWF  00
01CE:  MOVLW  0F
01D0:  MOVWF  01
01D2:  MOVLW  02
01D4:  MOVWF  FE9
01D6:  MOVLW  00
01D8:  MOVWF  FEA
01DA:  CLRF   FEE
01DC:  CLRWDT
01DE:  DECFSZ 00,F
01E0:  BRA    01DA
01E2:  DECFSZ 01,F
01E4:  BRA    01DA
01E6:  MOVLW  80
01E8:  MOVWF  00
01EA:  MOVLW  01
01EC:  MOVWF  01
01EE:  MOVLW  00
01F0:  MOVWF  FE9
01F2:  MOVLW  0F
01F4:  MOVWF  FEA
01F6:  CLRF   FEE
01F8:  CLRWDT
01FA:  DECFSZ 00,F
01FC:  BRA    01F6
01FE:  DECFSZ 01,F
0200:  BRA    01F6
0202:  MOVF   FC1,W
0204:  ANDLW  C0
0206:  IORLW  0F
0208:  MOVWF  FC1
020A:  MOVLW  07
020C:  MOVWF  FB4
.................... { 
.................... disable_interrupts(GLOBAL);   //общее запрещение прерываний 
020E:  BCF    FF2.6
0210:  BCF    FF2.7
0212:  BTFSC  FF2.7
0214:  BRA    0210
.................... setup_oscillator(OSC_8MHZ);  //|OSC_INTRC 
0216:  MOVLW  70
0218:  MOVWF  FD3
021A:  CLRF   F9B
021C:  MOVF   FD3,W
....................   
.................... set_tris_a(0x00);   //выходы 
021E:  MOVLW  00
0220:  MOVWF  F92
.................... set_tris_b(0xff);   //входы 
0222:  MOVLW  FF
0224:  MOVWF  F93
.................... set_tris_c(0x10);   //выходы, RC4-вход(данные от STM) 
0226:  MOVLW  10
0228:  MOVWF  F94
....................  
.................... //output_c(0x4f); 
.................... portc=0xcf;  //7.05 
022A:  MOVLW  CF
022C:  MOVWF  F82
.................... porta=0x7f; 
022E:  MOVLW  7F
0230:  MOVWF  F80
.................... portb=0xff; 
0232:  SETF   F81
....................  
.................... //set_tris_c(0x10);   //выходы, RC4-вход(данные от STM) 
.................... //output_a(0x7f); 
.................... //output_b(0xff); 
....................  
.................... pit_bykl(); 
0234:  RCALL  00EC
.................... pr_wkl_pit=0;   //пр. вкл. питания (исп. для 1-го нажатия кн. "Питание") 
0236:  CLRF   30
....................  
.................... delay_ms(1000);  //для настройки STM 
0238:  MOVLW  04
023A:  MOVWF  x98
023C:  MOVLW  FA
023E:  MOVWF  x99
0240:  RCALL  019E
0242:  DECFSZ x98,F
0244:  BRA    023C
....................  
.................... //Инициализация модуля MSSP(режим SPI) 
.................... SSPCON1=0x31; 
0246:  MOVLW  31
0248:  MOVWF  FC6
.................... SSPSTAT=0;    //0x80; 
024A:  CLRF   FC7
.................... SSPBUF=0x55; 
024C:  MOVLW  55
024E:  MOVWF  FC9
....................  
.................... //иниц. таймеров: 
.................... //t0con=0xc8; //8-ми разр 
.................... t0con=0x88; //16-ми разр счетчик 
0250:  MOVLW  88
0252:  MOVWF  FD5
.................... T1CON=0x85; 
0254:  MOVLW  85
0256:  MOVWF  FCD
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);   
0258:  MOVWF  FCD
....................  
.................... set_timer1(62286); 
025A:  MOVLW  F3
025C:  MOVWF  FCF
025E:  MOVLW  4E
0260:  MOVWF  FCE
.................... set_timer0(64536);  
0262:  MOVLW  FC
0264:  MOVWF  FD7
0266:  MOVLW  18
0268:  MOVWF  FD6
....................  
.................... //enable_interrupts(INT_TIMER2); 
.................... enable_interrupts(INT_TIMER1); 
026A:  BSF    F9D.0
.................... //enable_interrupts(INT_TIMER0); 
.................... enable_interrupts(GLOBAL); 
026C:  MOVLW  C0
026E:  IORWF  FF2,F
....................  
.................... //СОСТОЯНИЕ кнопок и ручек по ВКЛЮЧЕНИЮ: 
.................... //---------------------------------------- 
.................... for (ii=0; ii<6;ii++)  
0270:  CLRF   29
0272:  MOVF   29,W
0274:  SUBLW  05
0276:  BNC   02AA
....................  { 
....................    du_pA=porta&0xc0|mask[ii]; 
0278:  MOVF   F80,W
027A:  ANDLW  C0
027C:  MOVWF  x98
027E:  CLRF   03
0280:  MOVF   29,W
0282:  RCALL  00AE
0284:  MOVWF  01
0286:  MOVF   x98,W
0288:  IORWF  01,W
028A:  MOVWF  2D
....................    output_a(du_pA);    
028C:  CLRF   F92
028E:  MOVFF  2D,F89
....................    pr_state_rb[ii] = input_b(); 
0292:  CLRF   03
0294:  MOVF   29,W
0296:  ADDLW  23
0298:  MOVWF  FE9
029A:  MOVLW  00
029C:  ADDWFC 03,W
029E:  MOVWF  FEA
02A0:  SETF   F93
02A2:  MOVFF  F81,FEF
02A6:  INCF   29,F
02A8:  BRA    0272
....................  } 
....................  
.................... while(1) 
.................... { 
....................   for (ii=0; ii<6;ii++)  
02AA:  CLRF   29
02AC:  MOVF   29,W
02AE:  SUBLW  05
02B0:  BTFSS  FD8.0
02B2:  GOTO   09D2
....................  {   pr_ruk=0; 
02B6:  CLRF   2B
....................   // output_a(mask[ii]);              //SL... -> PORTA 
....................    du_pA=porta&0xc0|mask[ii]; 
02B8:  MOVF   F80,W
02BA:  ANDLW  C0
02BC:  MOVWF  x98
02BE:  CLRF   03
02C0:  MOVF   29,W
02C2:  RCALL  00AE
02C4:  MOVWF  01
02C6:  MOVF   x98,W
02C8:  IORWF  01,W
02CA:  MOVWF  2D
....................    output_a(du_pA);  
02CC:  CLRF   F92
02CE:  MOVFF  2D,F89
....................    tek_state_rb[ii] = input_b(); 
02D2:  CLRF   03
02D4:  MOVF   29,W
02D6:  ADDLW  1A
02D8:  MOVWF  FE9
02DA:  MOVLW  00
02DC:  ADDWFC 03,W
02DE:  MOVWF  FEA
02E0:  SETF   F93
02E2:  MOVFF  F81,FEF
....................    if (pr_state_rb[ii] ^ tek_state_rb[ii]) 
02E6:  CLRF   03
02E8:  MOVF   29,W
02EA:  ADDLW  23
02EC:  MOVWF  FE9
02EE:  MOVLW  00
02F0:  ADDWFC 03,W
02F2:  MOVWF  FEA
02F4:  MOVFF  FEF,98
02F8:  CLRF   03
02FA:  MOVF   29,W
02FC:  ADDLW  1A
02FE:  MOVWF  FE9
0300:  MOVLW  00
0302:  ADDWFC 03,W
0304:  MOVWF  FEA
0306:  MOVF   FEF,W
0308:  XORWF  x98,W
030A:  BTFSC  FD8.2
030C:  GOTO   09BC
....................     //возможно  нажатие или вращение ? 
....................    { 
....................    if ((tek_state_rb[ii]&mask_kn[ii])!=mask_kn[ii])  //если это кнопка, то отрабат. дребезг 
0310:  CLRF   03
0312:  MOVF   29,W
0314:  ADDLW  1A
0316:  MOVWF  FE9
0318:  MOVLW  00
031A:  ADDWFC 03,W
031C:  MOVWF  FEA
031E:  MOVFF  FEF,98
0322:  CLRF   03
0324:  MOVF   29,W
0326:  RCALL  00C4
0328:  MOVWF  01
032A:  ANDWF  x98,F
032C:  CLRF   03
032E:  MOVF   29,W
0330:  RCALL  00C4
0332:  MOVWF  01
0334:  SUBWF  x98,W
0336:  BZ    035E
....................       { //кнопка 
.................... 	    delay_ms(1); 
0338:  MOVLW  01
033A:  MOVWF  x99
033C:  RCALL  019E
.................... 	    tek1_state_rb = input_b(); 
033E:  SETF   F93
0340:  MOVFF  F81,20
.................... 	    delay_ms(1); 
0344:  MOVLW  01
0346:  MOVWF  x99
0348:  RCALL  019E
.................... 	    tek2_state_rb = input_b(); 
034A:  SETF   F93
034C:  MOVFF  F81,21
.................... 	    delay_ms(1); 
0350:  MOVLW  01
0352:  MOVWF  x99
0354:  RCALL  019E
.................... 	    tek3_state_rb = input_b(); 
0356:  SETF   F93
0358:  MOVFF  F81,22
.................... 	 
.................... 	//    if (tek_state_rb[ii] == tek3_state_rb)  //дребезг зак.-есть нажатие/отжатие или вращение! 
....................       } 
035C:  BRA    03AC
....................      else  //ручка 
....................        { 
....................          delay_us(200); 
035E:  MOVLW  85
0360:  MOVWF  00
0362:  DECFSZ 00,F
0364:  BRA    0362
.................... 	     tek1_state_rb = input_b(); 
0366:  SETF   F93
0368:  MOVFF  F81,20
.................... 	     delay_us(200); 
036C:  MOVLW  85
036E:  MOVWF  00
0370:  DECFSZ 00,F
0372:  BRA    0370
.................... 	     tek2_state_rb = input_b(); 
0374:  SETF   F93
0376:  MOVFF  F81,21
....................  
....................          if (tek1_state_rb==tek2_state_rb)						 
037A:  MOVF   21,W
037C:  SUBWF  20,W
037E:  BNZ   0390
....................            { 
.................... 	         delay_us(200); 
0380:  MOVLW  85
0382:  MOVWF  00
0384:  DECFSZ 00,F
0386:  BRA    0384
.................... 	         tek3_state_rb = input_b(); 
0388:  SETF   F93
038A:  MOVFF  F81,22
....................            } 
038E:  BRA    03AC
....................          else 
....................            { 
....................              delay_us(200); 
0390:  MOVLW  85
0392:  MOVWF  00
0394:  DECFSZ 00,F
0396:  BRA    0394
.................... 	         tek2_state_rb = input_b(); 
0398:  SETF   F93
039A:  MOVFF  F81,21
....................              delay_us(200); 
039E:  MOVLW  85
03A0:  MOVWF  00
03A2:  DECFSZ 00,F
03A4:  BRA    03A2
.................... 	         tek3_state_rb = input_b(); 
03A6:  SETF   F93
03A8:  MOVFF  F81,22
....................            }         
....................         } 
....................  
....................   if ((tek2_state_rb == tek3_state_rb)&&(tek_state_rb[ii] == tek3_state_rb))  //дребезг зак.-есть нажатие/отжатие или вращение! 
03AC:  MOVF   22,W
03AE:  SUBWF  21,W
03B0:  BTFSS  FD8.2
03B2:  GOTO   09BC
03B6:  CLRF   03
03B8:  MOVF   29,W
03BA:  ADDLW  1A
03BC:  MOVWF  FE9
03BE:  MOVLW  00
03C0:  ADDWFC 03,W
03C2:  MOVWF  FEA
03C4:  MOVF   22,W
03C6:  SUBWF  FEF,W
03C8:  BTFSS  FD8.2
03CA:  GOTO   09BC
....................     {  
....................        switch(ii)   //номер сигнала SL0,SL1,SL2,SL3,SL4,SL5 
03CE:  MOVF   29,W
03D0:  BZ    03F2
03D2:  XORLW  01
03D4:  BTFSC  FD8.2
03D6:  BRA    0524
03D8:  XORLW  03
03DA:  BTFSC  FD8.2
03DC:  BRA    0644
03DE:  XORLW  01
03E0:  BTFSC  FD8.2
03E2:  BRA    0764
03E4:  XORLW  07
03E6:  BTFSC  FD8.2
03E8:  BRA    0848
03EA:  XORLW  01
03EC:  BTFSC  FD8.2
03EE:  BRA    08E2
03F0:  BRA    09AA
.................... 			{ 
....................               case 0:  //SL0 
....................                 //Кнопки K1, Ser: 
.................... 				if (!(tek3_state_rb & (1 << 0)))  { buf_per=0x81;  //№1-наж. 
03F2:  BTFSC  22.0
03F4:  BRA    0410
03F6:  MOVLW  81
03F8:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
03FA:  SETF   F93
03FC:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0400:  BTFSS  22.0
0402:  BRA    03FA
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0404:  MOVF   2E,F
0406:  BTFSS  FD8.2
0408:  BRA    0404
....................                                                      buf_per=0x01;  //№1-отж. 
040A:  MOVLW  01
040C:  MOVWF  2E
....................                                                     break;  
040E:  BRA    09AA
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x82;  //№2-наж. 
0410:  BTFSC  22.5
0412:  BRA    042E
0414:  MOVLW  82
0416:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0418:  SETF   F93
041A:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
041E:  BTFSS  22.5
0420:  BRA    0418
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0422:  MOVF   2E,F
0424:  BTFSS  FD8.2
0426:  BRA    0422
....................                                                      buf_per=0x02;  //№2-отж. 
0428:  MOVLW  02
042A:  MOVWF  2E
....................                                                     break;  
042C:  BRA    09AA
....................                                                   } 
....................  
....................                 //Ручки -B_K1, +B_K1 -Sm_K1, +Sm_K1: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
042E:  BTFSS  22.1
0430:  BRA    04A0
0432:  BTFSS  22.2
0434:  BRA    04A0
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
0436:  CLRF   2A
0438:  MOVF   2A,W
043A:  SUBLW  01
043C:  BNC   04A0
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
043E:  MOVLW  02
0440:  MOVWF  00
0442:  MOVF   2A,W
0444:  MOVWF  01
0446:  BZ    0450
0448:  BCF    FD8.0
044A:  RLCF   00,F
044C:  DECFSZ 01,F
044E:  BRA    0448
0450:  MOVF   00,W
0452:  ANDWF  22,W
0454:  BZ    049C
0456:  CLRF   03
0458:  MOVF   29,W
045A:  ADDLW  23
045C:  MOVWF  FE9
045E:  MOVLW  00
0460:  ADDWFC 03,W
0462:  MOVWF  FEA
0464:  MOVFF  FEF,98
0468:  MOVLW  02
046A:  MOVWF  00
046C:  MOVF   2A,W
046E:  MOVWF  01
0470:  BZ    047A
0472:  BCF    FD8.0
0474:  RLCF   00,F
0476:  DECFSZ 01,F
0478:  BRA    0472
047A:  MOVF   00,W
047C:  ANDWF  x98,W
047E:  BNZ   049C
....................                              
....................                             switch(ib) 
0480:  MOVF   2A,W
0482:  BZ    048A
0484:  XORLW  01
0486:  BZ    0494
0488:  BRA    049C
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
048A:  MOVLW  01
048C:  MOVWF  2B
....................                                 buf_per=0x14;  //№20-влево  
048E:  MOVLW  14
0490:  MOVWF  2E
....................                                break; 
0492:  BRA    049C
....................  
....................                                case 1: 
....................                                 pr_ruk=1;   
0494:  MOVLW  01
0496:  MOVWF  2B
....................                                 buf_per=0x94;  //№20-вправо 
0498:  MOVLW  94
049A:  MOVWF  2E
....................                                break; 
....................                             }//switch  
049C:  INCF   2A,F
049E:  BRA    0438
....................                      } //for  ib     
....................                    } //if 
....................  
....................           //    else 
....................           //     {                  
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10)&& (!pr_ruk))   //RB3 & RB4==1 & pr_ruk=0 
04A0:  BTFSS  22.3
04A2:  BRA    050E
04A4:  BTFSS  22.4
04A6:  BRA    050E
04A8:  MOVF   2B,F
04AA:  BNZ   050E
....................                  { 
....................                      for (ib=0; ib<2;ib++)  
04AC:  CLRF   2A
04AE:  MOVF   2A,W
04B0:  SUBLW  01
04B2:  BNC   050E
....................                    { 
....................  
....................                      if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
04B4:  MOVLW  08
04B6:  MOVWF  00
04B8:  MOVF   2A,W
04BA:  MOVWF  01
04BC:  BZ    04C6
04BE:  BCF    FD8.0
04C0:  RLCF   00,F
04C2:  DECFSZ 01,F
04C4:  BRA    04BE
04C6:  MOVF   00,W
04C8:  ANDWF  22,W
04CA:  BZ    050A
04CC:  CLRF   03
04CE:  MOVF   29,W
04D0:  ADDLW  23
04D2:  MOVWF  FE9
04D4:  MOVLW  00
04D6:  ADDWFC 03,W
04D8:  MOVWF  FEA
04DA:  MOVFF  FEF,98
04DE:  MOVLW  08
04E0:  MOVWF  00
04E2:  MOVF   2A,W
04E4:  MOVWF  01
04E6:  BZ    04F0
04E8:  BCF    FD8.0
04EA:  RLCF   00,F
04EC:  DECFSZ 01,F
04EE:  BRA    04E8
04F0:  MOVF   00,W
04F2:  ANDWF  x98,W
04F4:  BNZ   050A
....................                               
....................                             switch(ib) 
04F6:  MOVF   2A,W
04F8:  BZ    0500
04FA:  XORLW  01
04FC:  BZ    0506
04FE:  BRA    050A
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x15;  //№21-влево  
0500:  MOVLW  15
0502:  MOVWF  2E
....................                                 break; 
0504:  BRA    050A
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                 buf_per=0x95;  //№21-вправо 
0506:  MOVLW  95
0508:  MOVWF  2E
....................                                break; 
....................                                } 
....................                             }//switch ib 
050A:  INCF   2A,F
050C:  BRA    04AE
....................                      } //for 
....................                     
....................                    } //if 
....................          //      } //else 
....................               pr_state_rb[ii]=tek3_state_rb; 
050E:  CLRF   03
0510:  MOVF   29,W
0512:  ADDLW  23
0514:  MOVWF  FE9
0516:  MOVLW  00
0518:  ADDWFC 03,W
051A:  MOVWF  FEA
051C:  MOVFF  22,FEF
....................               pr_ruk=0; 
0520:  CLRF   2B
.................... 			  break; 
0522:  BRA    09AA
....................                                 
....................               case 1:    //SL1 
....................                //Кнопки K2, DISP: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x83;  //№3-наж. 
0524:  BTFSC  22.0
0526:  BRA    0542
0528:  MOVLW  83
052A:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
052C:  SETF   F93
052E:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0532:  BTFSS  22.0
0534:  BRA    052C
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0536:  MOVF   2E,F
0538:  BTFSS  FD8.2
053A:  BRA    0536
....................                                                      buf_per=0x03;  //№2-отж. 
053C:  MOVLW  03
053E:  MOVWF  2E
....................                                                     break;  
0540:  BRA    09AA
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x84;  //№4-наж. 
0542:  BTFSC  22.5
0544:  BRA    0560
0546:  MOVLW  84
0548:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
054A:  SETF   F93
054C:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0550:  BTFSS  22.5
0552:  BRA    054A
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0554:  MOVF   2E,F
0556:  BTFSS  FD8.2
0558:  BRA    0554
....................                                                      buf_per=0x04;  //№4-отж. 
055A:  MOVLW  04
055C:  MOVWF  2E
....................                                                     break;  
055E:  BRA    09AA
....................                                                   } 
....................  
....................                 //Ручки -B_K2, +B_K2 -Sm_K2, +Sm_K2: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0560:  BTFSS  22.1
0562:  BRA    05D2
0564:  BTFSS  22.2
0566:  BRA    05D2
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
0568:  CLRF   2A
056A:  MOVF   2A,W
056C:  SUBLW  01
056E:  BNC   05D2
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
0570:  MOVLW  02
0572:  MOVWF  00
0574:  MOVF   2A,W
0576:  MOVWF  01
0578:  BZ    0582
057A:  BCF    FD8.0
057C:  RLCF   00,F
057E:  DECFSZ 01,F
0580:  BRA    057A
0582:  MOVF   00,W
0584:  ANDWF  22,W
0586:  BZ    05CE
0588:  CLRF   03
058A:  MOVF   29,W
058C:  ADDLW  23
058E:  MOVWF  FE9
0590:  MOVLW  00
0592:  ADDWFC 03,W
0594:  MOVWF  FEA
0596:  MOVFF  FEF,98
059A:  MOVLW  02
059C:  MOVWF  00
059E:  MOVF   2A,W
05A0:  MOVWF  01
05A2:  BZ    05AC
05A4:  BCF    FD8.0
05A6:  RLCF   00,F
05A8:  DECFSZ 01,F
05AA:  BRA    05A4
05AC:  MOVF   00,W
05AE:  ANDWF  x98,W
05B0:  BNZ   05CE
....................                               
....................                             switch(ib) 
05B2:  MOVF   2A,W
05B4:  BZ    05BC
05B6:  XORLW  01
05B8:  BZ    05C6
05BA:  BRA    05CE
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
05BC:  MOVLW  01
05BE:  MOVWF  2B
....................                                 buf_per=0x16;  //№22-влево 
05C0:  MOVLW  16
05C2:  MOVWF  2E
....................                                break; 
05C4:  BRA    05CE
....................  
....................                                case 1:  
....................                                 pr_ruk=1; 
05C6:  MOVLW  01
05C8:  MOVWF  2B
....................                                 buf_per=0x96;  //№22-вправо 
05CA:  MOVLW  96
05CC:  MOVWF  2E
....................                                break; 
....................                             }//switch  
05CE:  INCF   2A,F
05D0:  BRA    056A
....................                      } //for       
....................                    } //if 
....................  
....................            //   else 
....................            //    {                  
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10) && (!pr_ruk))   //RB3 & RB4==1 & (!pr_ruk) 
05D2:  BTFSS  22.3
05D4:  BRA    0640
05D6:  BTFSS  22.4
05D8:  BRA    0640
05DA:  MOVF   2B,F
05DC:  BNZ   0640
....................                  { 
....................                      for (ib=0; ib<2;ib++)  
05DE:  CLRF   2A
05E0:  MOVF   2A,W
05E2:  SUBLW  01
05E4:  BNC   0640
....................                    { 
....................  
....................                      if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
05E6:  MOVLW  08
05E8:  MOVWF  00
05EA:  MOVF   2A,W
05EC:  MOVWF  01
05EE:  BZ    05F8
05F0:  BCF    FD8.0
05F2:  RLCF   00,F
05F4:  DECFSZ 01,F
05F6:  BRA    05F0
05F8:  MOVF   00,W
05FA:  ANDWF  22,W
05FC:  BZ    063C
05FE:  CLRF   03
0600:  MOVF   29,W
0602:  ADDLW  23
0604:  MOVWF  FE9
0606:  MOVLW  00
0608:  ADDWFC 03,W
060A:  MOVWF  FEA
060C:  MOVFF  FEF,98
0610:  MOVLW  08
0612:  MOVWF  00
0614:  MOVF   2A,W
0616:  MOVWF  01
0618:  BZ    0622
061A:  BCF    FD8.0
061C:  RLCF   00,F
061E:  DECFSZ 01,F
0620:  BRA    061A
0622:  MOVF   00,W
0624:  ANDWF  x98,W
0626:  BNZ   063C
....................                               
....................                             switch(ib) 
0628:  MOVF   2A,W
062A:  BZ    0632
062C:  XORLW  01
062E:  BZ    0638
0630:  BRA    063C
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x17;  //№23-влево 
0632:  MOVLW  17
0634:  MOVWF  2E
....................                                 break; 
0636:  BRA    063C
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                buf_per=0x97;  //№23-вправо 
0638:  MOVLW  97
063A:  MOVWF  2E
....................                                break; 
....................                                } 
....................                             }//switch  
063C:  INCF   2A,F
063E:  BRA    05E0
....................                      } //for 
....................                     
....................                    } //if 
....................            //    } //else 
.................... //              pr_state_rb[ii]=tek3_state_rb; 
....................               pr_ruk=0; 
0640:  CLRF   2B
.................... 						 		                         
.................... 			  break; 
0642:  BRA    09AA
....................        
....................               case 2: //SL2 
....................                //Кнопки Raz, Pam: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x85;  //№5-наж. 
0644:  BTFSC  22.0
0646:  BRA    0662
0648:  MOVLW  85
064A:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
064C:  SETF   F93
064E:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0652:  BTFSS  22.0
0654:  BRA    064C
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0656:  MOVF   2E,F
0658:  BTFSS  FD8.2
065A:  BRA    0656
....................                                                      buf_per=0x05;  //№5-отж. 
065C:  MOVLW  05
065E:  MOVWF  2E
....................                                                     break;  
0660:  BRA    09AA
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x86;  //№6-наж. 
0662:  BTFSC  22.5
0664:  BRA    0680
0666:  MOVLW  86
0668:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
066A:  SETF   F93
066C:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0670:  BTFSS  22.5
0672:  BRA    066A
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0674:  MOVF   2E,F
0676:  BTFSS  FD8.2
0678:  BRA    0674
....................                                                      buf_per=0x06;  //№6-отж. 
067A:  MOVLW  06
067C:  MOVWF  2E
....................                                                     break;  
067E:  BRA    09AA
....................                                                   } 
....................                 //Ручки -T, +T -Del, +Del: 
....................                 //*********************************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0680:  BTFSS  22.1
0682:  BRA    06F2
0684:  BTFSS  22.2
0686:  BRA    06F2
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
0688:  CLRF   2A
068A:  MOVF   2A,W
068C:  SUBLW  01
068E:  BNC   06F2
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
0690:  MOVLW  02
0692:  MOVWF  00
0694:  MOVF   2A,W
0696:  MOVWF  01
0698:  BZ    06A2
069A:  BCF    FD8.0
069C:  RLCF   00,F
069E:  DECFSZ 01,F
06A0:  BRA    069A
06A2:  MOVF   00,W
06A4:  ANDWF  22,W
06A6:  BZ    06EE
06A8:  CLRF   03
06AA:  MOVF   29,W
06AC:  ADDLW  23
06AE:  MOVWF  FE9
06B0:  MOVLW  00
06B2:  ADDWFC 03,W
06B4:  MOVWF  FEA
06B6:  MOVFF  FEF,98
06BA:  MOVLW  02
06BC:  MOVWF  00
06BE:  MOVF   2A,W
06C0:  MOVWF  01
06C2:  BZ    06CC
06C4:  BCF    FD8.0
06C6:  RLCF   00,F
06C8:  DECFSZ 01,F
06CA:  BRA    06C4
06CC:  MOVF   00,W
06CE:  ANDWF  x98,W
06D0:  BNZ   06EE
....................                               
....................                             switch(ib) 
06D2:  MOVF   2A,W
06D4:  BZ    06DC
06D6:  XORLW  01
06D8:  BZ    06E6
06DA:  BRA    06EE
.................... 			                { 
....................                                case 0:  
....................                                 pr_ruk=1; 
06DC:  MOVLW  01
06DE:  MOVWF  2B
....................                                 buf_per=0x18;  //№24-влево 
06E0:  MOVLW  18
06E2:  MOVWF  2E
....................                                break; 
06E4:  BRA    06EE
....................  
....................                                case 1:  
....................                                 pr_ruk=1; 
06E6:  MOVLW  01
06E8:  MOVWF  2B
....................                                 buf_per=0x98;  //№24-вправо 
06EA:  MOVLW  98
06EC:  MOVWF  2E
....................                                break; 
....................                             }//switch  
06EE:  INCF   2A,F
06F0:  BRA    068A
....................                      } //for       
....................                    } //if 
....................  
....................            //   else 
....................                {                  
....................                if  ((tek3_state_rb & 0x08)&&(tek3_state_rb & 0x10) && (!pr_ruk))   //RB3 & RB4==1 & (!pr_ruk) 
06F2:  BTFSS  22.3
06F4:  BRA    0760
06F6:  BTFSS  22.4
06F8:  BRA    0760
06FA:  MOVF   2B,F
06FC:  BNZ   0760
....................                  { 
....................                      for (ib=0; ib<2;ib++)  
06FE:  CLRF   2A
0700:  MOVF   2A,W
0702:  SUBLW  01
0704:  BNC   0760
....................                    { 
....................  
....................                      if ((tek3_state_rb & (0x08 << ib)) && (!(pr_state_rb[ii] & (0x08 << ib)))) 
0706:  MOVLW  08
0708:  MOVWF  00
070A:  MOVF   2A,W
070C:  MOVWF  01
070E:  BZ    0718
0710:  BCF    FD8.0
0712:  RLCF   00,F
0714:  DECFSZ 01,F
0716:  BRA    0710
0718:  MOVF   00,W
071A:  ANDWF  22,W
071C:  BZ    075C
071E:  CLRF   03
0720:  MOVF   29,W
0722:  ADDLW  23
0724:  MOVWF  FE9
0726:  MOVLW  00
0728:  ADDWFC 03,W
072A:  MOVWF  FEA
072C:  MOVFF  FEF,98
0730:  MOVLW  08
0732:  MOVWF  00
0734:  MOVF   2A,W
0736:  MOVWF  01
0738:  BZ    0742
073A:  BCF    FD8.0
073C:  RLCF   00,F
073E:  DECFSZ 01,F
0740:  BRA    073A
0742:  MOVF   00,W
0744:  ANDWF  x98,W
0746:  BNZ   075C
....................                               
....................                             switch(ib) 
0748:  MOVF   2A,W
074A:  BZ    0752
074C:  XORLW  01
074E:  BZ    0758
0750:  BRA    075C
.................... 			                { 
....................                                case 0:  
....................                                { 
....................                                 buf_per=0x19;  //№25-влево 
0752:  MOVLW  19
0754:  MOVWF  2E
....................                                 break; 
0756:  BRA    075C
....................                                } 
....................  
....................                                case 1:  
....................                                { 
....................                                buf_per=0x99;  //№25-вправо 
0758:  MOVLW  99
075A:  MOVWF  2E
....................                                break; 
....................                                } 
....................                             }//switch  
075C:  INCF   2A,F
075E:  BRA    0700
....................                      } //for 
....................                     
....................                    } //if 
....................                } //else 
.................... //              pr_state_rb[ii]=tek3_state_rb;  
.................... 			  pr_ruk=0;			 		                         
0760:  CLRF   2B
.................... 			  break;  
0762:  BRA    09AA
....................  
....................               case 3:  //SL3 
....................  
....................                //Кнопки Sinch, Pusk, Kurs, Izm: 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x87;  //№7-наж. 
0764:  BTFSC  22.0
0766:  BRA    0782
0768:  MOVLW  87
076A:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
076C:  SETF   F93
076E:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
0772:  BTFSS  22.0
0774:  BRA    076C
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0776:  MOVF   2E,F
0778:  BTFSS  FD8.2
077A:  BRA    0776
....................                                                      buf_per=0x07;  //№7-отж. 
077C:  MOVLW  07
077E:  MOVWF  2E
....................                                                     break;  
0780:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 3))) { buf_per=0x88;  //№8-наж. 
0782:  BTFSC  22.3
0784:  BRA    07A0
0786:  MOVLW  88
0788:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
078A:  SETF   F93
078C:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 3))); 
0790:  BTFSS  22.3
0792:  BRA    078A
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0794:  MOVF   2E,F
0796:  BTFSS  FD8.2
0798:  BRA    0794
....................                                                      buf_per=0x08;  //№8-отж. 
079A:  MOVLW  08
079C:  MOVWF  2E
....................                                                     break;  
079E:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 4))) { buf_per=0x89;  //№9-наж. 
07A0:  BTFSC  22.4
07A2:  BRA    07BE
07A4:  MOVLW  89
07A6:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
07A8:  SETF   F93
07AA:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 4))); 
07AE:  BTFSS  22.4
07B0:  BRA    07A8
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
07B2:  MOVF   2E,F
07B4:  BTFSS  FD8.2
07B6:  BRA    07B2
....................                                                      buf_per=0x09;  //№9-отж. 
07B8:  MOVLW  09
07BA:  MOVWF  2E
....................                                                     break;  
07BC:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 5))) { buf_per=0x8A;  //№10-наж. 
07BE:  BTFSC  22.5
07C0:  BRA    07DC
07C2:  MOVLW  8A
07C4:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
07C6:  SETF   F93
07C8:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
07CC:  BTFSS  22.5
07CE:  BRA    07C6
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
07D0:  MOVF   2E,F
07D2:  BTFSS  FD8.2
07D4:  BRA    07D0
....................                                                      buf_per=0x0A;  //№10-отж. 
07D6:  MOVLW  0A
07D8:  MOVWF  2E
....................                                                     break;  
07DA:  BRA    09AA
....................                                                   } 
....................  
....................                 //Ручки -Ur, +Ur : 
....................                 //**************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
07DC:  BTFSS  22.1
07DE:  BRA    0846
07E0:  BTFSS  22.2
07E2:  BRA    0846
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
07E4:  CLRF   2A
07E6:  MOVF   2A,W
07E8:  SUBLW  01
07EA:  BNC   0846
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
07EC:  MOVLW  02
07EE:  MOVWF  00
07F0:  MOVF   2A,W
07F2:  MOVWF  01
07F4:  BZ    07FE
07F6:  BCF    FD8.0
07F8:  RLCF   00,F
07FA:  DECFSZ 01,F
07FC:  BRA    07F6
07FE:  MOVF   00,W
0800:  ANDWF  22,W
0802:  BZ    0842
0804:  CLRF   03
0806:  MOVF   29,W
0808:  ADDLW  23
080A:  MOVWF  FE9
080C:  MOVLW  00
080E:  ADDWFC 03,W
0810:  MOVWF  FEA
0812:  MOVFF  FEF,98
0816:  MOVLW  02
0818:  MOVWF  00
081A:  MOVF   2A,W
081C:  MOVWF  01
081E:  BZ    0828
0820:  BCF    FD8.0
0822:  RLCF   00,F
0824:  DECFSZ 01,F
0826:  BRA    0820
0828:  MOVF   00,W
082A:  ANDWF  x98,W
082C:  BNZ   0842
....................                               
....................                             switch(ib) 
082E:  MOVF   2A,W
0830:  BZ    0838
0832:  XORLW  01
0834:  BZ    083E
0836:  BRA    0842
.................... 			                { 
....................                                case 0:  
....................                                 buf_per=0x1A;  //№26-влево 
0838:  MOVLW  1A
083A:  MOVWF  2E
....................                                break; 
083C:  BRA    0842
....................  
....................                                case 1: 
....................                                buf_per=0x9A;  //№26-вправо 
083E:  MOVLW  9A
0840:  MOVWF  2E
....................                                break; 
....................                             }//switch  
0842:  INCF   2A,F
0844:  BRA    07E6
....................                      } //for       
....................                    } //if 
.................... //			    pr_state_rb[ii]=tek3_state_rb; 			 		                         
.................... 			  break; 
0846:  BRA    09AA
....................  
....................               case 4: // SL4 
....................               //Кнопки Pit, Sbor: 
.................... 				if (!(tek3_state_rb & (1 << 0)))  { buf_per=0x8B;  //№11-наж. 
0848:  BTFSC  22.0
084A:  BRA    0858
084C:  MOVLW  8B
084E:  MOVWF  2E
....................                                                     if (pr_wkl_pit==0) 
0850:  MOVF   30,F
0852:  BNZ   0856
....................                                                       { 
....................                                                        pit_bkl(); 
0854:  RCALL  00DA
....................                                                         
....................                                                       }  
....................                                                     break;  
0856:  BRA    09AA
....................                                                   } 
....................                   if (!(tek3_state_rb & (1 << 5))) { buf_per=0x8C;  //№12-наж. 
0858:  BTFSC  22.5
085A:  BRA    0876
085C:  MOVLW  8C
085E:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0860:  SETF   F93
0862:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0866:  BTFSS  22.5
0868:  BRA    0860
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
086A:  MOVF   2E,F
086C:  BTFSS  FD8.2
086E:  BRA    086A
....................                                                      buf_per=0x0C;  //№12-отж. 
0870:  MOVLW  0C
0872:  MOVWF  2E
....................                                                     break;  
0874:  BRA    09AA
....................                                                   } 
....................  
....................  
....................                 //Ручки -Ur, +Ur : 
....................                 //**************** 
....................                  
....................               if  ((tek3_state_rb & 0x02)&&(tek3_state_rb & 0x04))  //RB1 & RB2==1 
0876:  BTFSS  22.1
0878:  BRA    08E0
087A:  BTFSS  22.2
087C:  BRA    08E0
....................                     {  
....................                      for (ib=0; ib<2;ib++)  
087E:  CLRF   2A
0880:  MOVF   2A,W
0882:  SUBLW  01
0884:  BNC   08E0
....................                      { 
....................                        if ((tek3_state_rb & (0x02 << ib)) && (!(pr_state_rb[ii] & (0x02 << ib)))) 
0886:  MOVLW  02
0888:  MOVWF  00
088A:  MOVF   2A,W
088C:  MOVWF  01
088E:  BZ    0898
0890:  BCF    FD8.0
0892:  RLCF   00,F
0894:  DECFSZ 01,F
0896:  BRA    0890
0898:  MOVF   00,W
089A:  ANDWF  22,W
089C:  BZ    08DC
089E:  CLRF   03
08A0:  MOVF   29,W
08A2:  ADDLW  23
08A4:  MOVWF  FE9
08A6:  MOVLW  00
08A8:  ADDWFC 03,W
08AA:  MOVWF  FEA
08AC:  MOVFF  FEF,98
08B0:  MOVLW  02
08B2:  MOVWF  00
08B4:  MOVF   2A,W
08B6:  MOVWF  01
08B8:  BZ    08C2
08BA:  BCF    FD8.0
08BC:  RLCF   00,F
08BE:  DECFSZ 01,F
08C0:  BRA    08BA
08C2:  MOVF   00,W
08C4:  ANDWF  x98,W
08C6:  BNZ   08DC
....................                               
....................                             switch(ib) 
08C8:  MOVF   2A,W
08CA:  BZ    08D2
08CC:  XORLW  01
08CE:  BZ    08D8
08D0:  BRA    08DC
.................... 			                { 
....................                                case 0:  
....................                                 buf_per=0x1B;  //№27-влево 
08D2:  MOVLW  1B
08D4:  MOVWF  2E
....................                                break; 
08D6:  BRA    08DC
....................  
....................                                case 1:  
....................                                 buf_per=0x9B;  //№27-вправо 
08D8:  MOVLW  9B
08DA:  MOVWF  2E
....................                                break; 
....................                             }//switch  
08DC:  INCF   2A,F
08DE:  BRA    0880
....................                      } //for       
....................                    } //if 
.................... //			     pr_state_rb[ii]=tek3_state_rb; 			 		                         
.................... 			  break;  
08E0:  BRA    09AA
....................  
....................               case 5: //SL5  
....................                //Кнопки Men,"1", "2", "3", "4", "5": 
.................... 				if (!(tek3_state_rb & (1 << 0))) { buf_per=0x8D;  //№13-наж. 
08E2:  BTFSC  22.0
08E4:  BRA    0900
08E6:  MOVLW  8D
08E8:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
08EA:  SETF   F93
08EC:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 0))); 
08F0:  BTFSS  22.0
08F2:  BRA    08EA
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
08F4:  MOVF   2E,F
08F6:  BTFSS  FD8.2
08F8:  BRA    08F4
....................                                                      buf_per=0x0D;  //№13-отж. 
08FA:  MOVLW  0D
08FC:  MOVWF  2E
....................                                                     break;  
08FE:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 1))) { buf_per=0x8e;  //№14-наж. 
0900:  BTFSC  22.1
0902:  BRA    091E
0904:  MOVLW  8E
0906:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0908:  SETF   F93
090A:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 1))); 
090E:  BTFSS  22.1
0910:  BRA    0908
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0912:  MOVF   2E,F
0914:  BTFSS  FD8.2
0916:  BRA    0912
....................                                                      buf_per=0x0e;  //№14-отж. 
0918:  MOVLW  0E
091A:  MOVWF  2E
....................                                                     break;  
091C:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 2))) { buf_per=0x8f;  //№15-наж. 
091E:  BTFSC  22.2
0920:  BRA    093C
0922:  MOVLW  8F
0924:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0926:  SETF   F93
0928:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 2))); 
092C:  BTFSS  22.2
092E:  BRA    0926
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
0930:  MOVF   2E,F
0932:  BTFSS  FD8.2
0934:  BRA    0930
....................                                                      buf_per=0x0f;  //№15-отж. 
0936:  MOVLW  0F
0938:  MOVWF  2E
....................                                                     break;  
093A:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 3))) { buf_per=0x90;  //№16-наж. 
093C:  BTFSC  22.3
093E:  BRA    095A
0940:  MOVLW  90
0942:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0944:  SETF   F93
0946:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 3))); 
094A:  BTFSS  22.3
094C:  BRA    0944
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
094E:  MOVF   2E,F
0950:  BTFSS  FD8.2
0952:  BRA    094E
....................                                                      buf_per=0x10;  //№16-отж. 
0954:  MOVLW  10
0956:  MOVWF  2E
....................                                                     break;  
0958:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 4))) { buf_per=0x91;  //№17-наж. 
095A:  BTFSC  22.4
095C:  BRA    0978
095E:  MOVLW  91
0960:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0962:  SETF   F93
0964:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 4))); 
0968:  BTFSS  22.4
096A:  BRA    0962
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
096C:  MOVF   2E,F
096E:  BTFSS  FD8.2
0970:  BRA    096C
....................                                                      buf_per=0x11;  //№17-отж. 
0972:  MOVLW  11
0974:  MOVWF  2E
....................                                                     break;  
0976:  BRA    09AA
....................                                                   } 
....................                 if (!(tek3_state_rb & (1 << 5))) { buf_per=0x92;  //№18-наж. 
0978:  BTFSC  22.5
097A:  BRA    0996
097C:  MOVLW  92
097E:  MOVWF  2E
....................                                                     do 
....................                                                      tek3_state_rb = input_b();  
0980:  SETF   F93
0982:  MOVFF  F81,22
....................                                                     while (!(tek3_state_rb & (1 << 5))); 
0986:  BTFSS  22.5
0988:  BRA    0980
....................                                                     //отжатие произошло 
....................                                                     while (buf_per!=0) {} 
098A:  MOVF   2E,F
098C:  BTFSS  FD8.2
098E:  BRA    098A
....................                                                      buf_per=0x12;  //№18-отж. 
0990:  MOVLW  12
0992:  MOVWF  2E
....................                                                     break;  
0994:  BRA    09AA
....................                                                   } 
....................  
....................    
....................                 pr_state_rb[ii]=tek3_state_rb; 						 		                         
0996:  CLRF   03
0998:  MOVF   29,W
099A:  ADDLW  23
099C:  MOVWF  FE9
099E:  MOVLW  00
09A0:  ADDWFC 03,W
09A2:  MOVWF  FEA
09A4:  MOVFF  22,FEF
.................... 			  break; 
09A8:  BRA    09AA
....................  
....................               default: 
....................               break;   
....................  
....................             }//switch(ii)  
....................     pr_state_rb[ii]=tek3_state_rb;   
09AA:  CLRF   03
09AC:  MOVF   29,W
09AE:  ADDLW  23
09B0:  MOVWF  FE9
09B2:  MOVLW  00
09B4:  ADDWFC 03,W
09B6:  MOVWF  FEA
09B8:  MOVFF  22,FEF
....................     
....................   } 
....................         
....................    }//if 
....................     if  (pr_wykl==1)  
09BC:  DECFSZ x97,W
09BE:  BRA    09CE
....................    { 
....................       output_low(pin_A6); 
09C0:  BCF    F92.6
09C2:  BCF    F89.6
....................       output_high(pin_A7); 
09C4:  BCF    F92.7
09C6:  BSF    F89.7
....................       output_high(pin_C7);    //low 7.05. 
09C8:  BCF    F94.7
09CA:  BSF    F8B.7
....................       pr_wykl=0;    
09CC:  CLRF   x97
....................    } 
09CE:  INCF   29,F
09D0:  BRA    02AC
....................    
....................       
....................  }//for (ii) 
09D2:  BRA    02AA
....................   
....................   
....................  
.................... }//while(1) 
.................... //output_bit(PIN_C3,1); 
.................... //BUF_CAP[i-1]=input(PIN_C4); 
.................... //output_bit( PIN_B2, 0);  //Ldac  в 0 
....................  
.................... //level = input_state(pin_A3); 
....................  
.................... }  //main 
....................  
09D4:  BRA    09D4
....................  
.................... void pit_bkl(void) 
.................... { 
....................   output_high(pin_A6); 
*
00DA:  BCF    F92.6
00DC:  BSF    F89.6
....................   output_low(pin_A7); 
00DE:  BCF    F92.7
00E0:  BCF    F89.7
....................   output_low(pin_C7);  //high  7.05. 
00E2:  BCF    F94.7
00E4:  BCF    F8B.7
....................   pr_wkl_pit=1; 
00E6:  MOVLW  01
00E8:  MOVWF  30
00EA:  RETURN 0
.................... } 
....................      
.................... void pit_bykl(void) 
.................... { 
....................    output_low(pin_A6); 
00EC:  BCF    F92.6
00EE:  BCF    F89.6
....................    output_high(pin_A7); 
00F0:  BCF    F92.7
00F2:  BSF    F89.7
....................    output_high(sw_K1);  
00F4:  BCF    F94.0
00F6:  BSF    F8B.0
....................    output_high(sw_K2);  
00F8:  BCF    F94.1
00FA:  BSF    F8B.1
....................    output_high(sw_Sx); 
00FC:  BCF    F94.2
00FE:  BSF    F8B.2
....................    output_high(pin_C7);    //low 7.05. 
0100:  BCF    F94.7
0102:  BSF    F8B.7
....................    pr_wkl_pit=0;  
0104:  CLRF   30
0106:  RETURN 0
....................  
.................... } 
....................  
....................  
....................  
.................... /*  !!!!!!!!!!!!!!!!!!!! 
.................... void pit_bkl(void) 
.................... { 
....................   porta=porta & 0xbf; 
....................   porta=porta | 0x80; 
....................   portc=portc | 0x90; 
....................   pr_wkl_pit=1; 
.................... } 
....................      
.................... void pit_bykl(void) 
.................... { 
....................   porta=porta | 0x40; 
....................   porta=porta & 0x7f; 
....................   portc=portc & 0x6f; 
....................   pr_wkl_pit=0;  
.................... } 
....................  
....................  
.................... //прием от STM 
....................  
....................   buf_prm=SSPBUF;  
....................   kod=buf_prm&0x7f; 
....................  
....................   if (( kod !=0)&&( kod <4))  //Kan1,Kan2,Sinchr, 
....................      { 
....................       if  (buf_prm & (1 << 7)) 
....................           portc=portc | (1 << (kod -1));  //bit=1 
....................       else  
....................           portc=portc ^ (1 << (kod -1));  //bit=0 
....................      } 
....................   if ( kod ==4) 
....................      if  (buf_prm & (1 << 7)) 
....................           pit_bkl(); 
....................      else 
....................           pit_bykl(); 
....................  
....................  
....................  
....................     if ((sspstat&0x01)==1) 
....................    { 
....................     SSPBUF=0x55; 
....................    } 
....................    set_timer1(63036); 
.................... */  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /* 
....................  
....................  
....................  
.................... void obr_ruk_Bp_K1(void) 
.................... {  
....................  buf[ik]=tek3_state_rb; 
....................  ik=ik+1; 
....................  
....................   buf_per[kk]=2; 
....................  kk=kk+1;  
....................   buf_per[kk]=0x0a; 
....................   kk=kk+1; 
....................  //putc('2'); 
.................... }  
.................... */ 

Configuration Fuses:
   Word  1: CF00   FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB
   Word  6: E00F   NOWRT NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
